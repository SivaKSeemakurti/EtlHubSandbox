{
	"name": "bkp_nb_dht_company_load",
	"properties": {
		"folder": {
			"name": "ETLHub/Dimensions&Facts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPoolKyn001494",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3026a383-6107-48c8-a118-7f11dc4e9ef9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPoolKyn001494",
				"name": "sPoolKyn001494",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPoolKyn001494",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from azure.storage.blob import BlobClient\r\n",
					"import pandas as pd\r\n",
					"from io import StringIO\r\n",
					"from pyspark.sql.functions import md5, concat_ws\r\n",
					"from sqlite3 import connect\r\n",
					"from pyspark.sql import functions as F\r\n",
					"#conn = connect(':memory:')\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import * \r\n",
					"from delta.tables import *\r\n",
					"#import os\r\n",
					"import sys"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"account_name = 'adls4fsoetlhubdevuseast' # fill in your primary account name \r\n",
					"container_name = 'etlhubfilestorage' # fill in your container name \r\n",
					"relative_path = 'extract/BMSIW/' # fill in your relative folder path \r\n",
					"file_name='DS_COMPANY_DATA.csv' \r\n",
					"natural_key=\"LEDGER_CODE\"\r\n",
					"tablename=\"etlhubConfirmed.dht_company\"\r\n",
					"#natural_key=\"BUSINESS_PARTNER_ID\"\r\n",
					"keycolumn=\"COMPANY_KEY\""
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \r\n",
					"print('Primary storage account path: ' + adls_path) \r\n",
					"\r\n",
					"# Read a csv file \r\n",
					"csv_path = adls_path + file_name\r\n",
					"incrementalData_DF = spark.read.csv(csv_path, header = 'true')\r\n",
					"\r\n",
					"# Get column list for creating Rec_Checksum\r\n",
					"\r\n",
					"#Add checks for duplicate data, Check for 1. dups in source data based on natural Key and\r\n",
					"# 2. Dups in target already\r\n",
					"\r\n",
					"col_list=[]\r\n",
					"for i in incrementalData_DF.columns:\r\n",
					"    col_list.append(i)\r\n",
					"\r\n",
					"# Add a checsum column to help identify the changed rows\r\n",
					"\r\n",
					"incrementalData_DF1 = incrementalData_DF.withColumn(\"nk_hash\",md5(natural_key))\r\n",
					"incrementalData_DF2 = incrementalData_DF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\r\n",
					"\r\n",
					"#sell_cyclecolhashDF.show()\r\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")\r\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create a dataframe with target deltalake table data with necessary columns\r\n",
					"\r\n",
					"existingDataDF=spark.sql(\"SELECT * FROM {}  WHERE CURRENT_IND='Y'\".format(tablename))\r\n",
					"#existingDataDF=spark.sql(\"SELECT tgt.* from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\r\n",
					"\r\n",
					"existingMaxKeyDF=spark.sql(\"SELECT MAX({}) existing_MAX_KEY from {} WHERE CURRENT_IND='Y'\".format(keycolumn,tablename))\r\n",
					"\r\n",
					"#existingMaxKeyDF=spark.sql(\"SELECT MAX(EMPLOYEE_KEY) existing_MAX_KEY from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\r\n",
					"\r\n",
					"# prefix all columns from target table with 'existing_'. This will help to differentiate columns when incremental and existing DF's are joined\r\n",
					"\r\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\r\n",
					"\r\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF1')\r\n",
					"\r\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1,incrementalData_DF2.EMPLOYEE_BUSINESS_CD == existingDataDF1.existing_EMPLOYEE_BUSINESS_CD, \"fullouter\") \r\n",
					"fullJoin2=fullJoin1.join(existingMaxKeyDF,None,\"CROSS\")\r\n",
					"\r\n",
					"fullJoin2.createOrReplaceTempView('fullJoin')"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}