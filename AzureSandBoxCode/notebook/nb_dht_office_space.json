{
	"name": "nb_dht_office_space",
	"properties": {
		"folder": {
			"name": "ETLHub/Dimensions&Facts/GREIW"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPool001494New",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "472g",
			"driverCores": 80,
			"executorMemory": "472g",
			"executorCores": 80,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f5d16166-0246-4b13-ba3d-6339c0e24487"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPool001494New",
				"name": "sPool001494New",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPool001494New",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 80,
				"memory": 472,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Office Space load**\n",
					"\n",
					"This notebook loads data to deltalake table etlhubConfirmed.DHT_OFFICE_SPACE by sourcing data from Tririga system.\n",
					"The file is pulled to datastage server using SFTP protocol.\n",
					"\n",
					"The CSV formatted file is uploaded to adls for loading to OFFICE_SPACE deltalake table created.\n",
					"\n",
					"The script used for file transfer is /home/resodba/trrgprocget.sh\n",
					"\n",
					"File Name: resodb_space_tririga_staging.csv from /GlobalDir/CustomerFiles/tririga"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Import all the necessary libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobClient\n",
					"import pandas as pd\n",
					"from io import StringIO\n",
					"from pyspark.sql.functions import md5, concat_ws,trim\n",
					"from sqlite3 import connect\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import SparkSession \n",
					"from pyspark.sql.types import * \n",
					"from delta.tables import *\n",
					"import os\n",
					"import sys\n",
					"from datetime import datetime"
				],
				"execution_count": 66
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"account_name = 'adls4fsoetlhubdevuseast' # fill in your primary account name \n",
					"container_name = 'etlhubfilestorage' # fill in your container name \n",
					"relative_path = 'extract/Tririga/OfficeSpace/' # fill in your relative folder path \n",
					"relative_archive_path='archive/'\n",
					"relative_reject_path='reject/OfficeSpace/'\n",
					"file_name='ResodbOfficeSpaceTririgaStaging.csv' # 20220705, 20220705_upd1, 20220705_upd2\n",
					"natural_key=\"BUSINESS_ID\"\n",
					"MinimumTririgaCampusCount=450\n",
					"tablename=\"etlhubConfirmed.DHT_OFFICE_SPACE\"\n",
					"stagingtable=\"DHTS_OFFICE_SPACE\"\n",
					"keycolumn=\"SPACE_KEY\"\n",
					"dateonly=datetime.now().strftime(\"%Y-%m-%d\")\n",
					"date = datetime.now().strftime(\"%Y-%m-%d-%I:%M:%S_%p\")\n",
					"extract_dt = datetime.now().strftime(\"%Y-%m-%d %I:%M:%S\") #This is batch/cycle date. It would be common for all the rows inserted in a single run\n",
					"rec_start_dt=datetime.now().strftime(\"%Y-%m-%d %I:%M:%S\") #This should ideally from the source system. If source doesnt have any date column, use current date \n",
					"print(extract_dt)\n",
					"print(natural_key)"
				],
				"execution_count": 67
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Copy source CSV file to archive folder including timestamp in file name"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#Read data from adls csv file extracted from source at \n",
					"https://adls4fsoetlhubdevuseast.dfs.core.windows.net/etlhubfilestorage/extract/Tririga/campus/IWTRIRIGACampusQuery.csv\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \n",
					"print('Primary storage account path: ' + adls_path) \n",
					"\n",
					"adls_arch_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_archive_path) \n",
					"print('Primary archive path: ' + adls_arch_path) \n",
					"\n",
					"adls_reject_path='abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_reject_path) \n",
					"\n",
					"print(natural_key)\n",
					"\n",
					"relative_archive_path\n",
					"# Read a csv file \n",
					"csv_path = adls_path + file_name\n",
					"arch_fil_name=file_name.rsplit(\".\")\n",
					"csv_archive_path = adls_arch_path + arch_fil_name[0] + '_' + date + '.' + arch_fil_name[1]\n",
					"\n",
					"incrementalData_DF = spark.read.csv(csv_path, header = 'true')\n",
					"\n",
					"incrementalData_DF.createOrReplaceTempView('SrcData')\n",
					"\n",
					"# Capturing recods that are not available in reference table\n",
					"qry_RefIntegrityFailDF=\"\"\"\n",
					"select A.*\n",
					"from SrcData A\n",
					"left outer join etlhubconfirmed.dhtr_space_floor_level B on trim(A.FLOOR_ID)=trim(B.FLOOR_ID) \n",
					"where B.FLOOR_ID IS NULL;\n",
					"\"\"\"\n",
					"RejDataDF=spark.sql(qry_RefIntegrityFailDF)\n",
					"RejDataDF.createOrReplaceTempView('RejDataView')\n",
					"\n",
					"RejDataViewqry1=\"\"\"\n",
					"SELECT COUNT(*) as CNT FROM RejDataView\n",
					";\n",
					"\"\"\"\n",
					"RejDataViewdf1=spark.sql(RejDataViewqry1)\n",
					"RejDataViewcnt1=RejDataViewdf1.count()\n",
					"\n",
					"if RejDataViewcnt1 == 0:\n",
					"    status = 'success'\n",
					"else:\n",
					"      RejDataDF.toPandas().to_csv(adls_reject_path+dateonly + '/' + 'IWTRIRIGAOfficeSpaceRejWithFloorID.csv', sep=',', header=True, index=False)\n",
					"\n",
					"qry_RefIntegrityFailSpaceClassDF=\"\"\"\n",
					"select A.*\n",
					"from SrcData A\n",
					"left outer join etlhubconfirmed.dhtr_space_class C ON \n",
					"trim(A.SPACE_CLASS_CODE1)=trim(C.SPACE_CLASS_CODE1) AND trim(A.SPACE_CLASS_CODE2)=trim(C.SPACE_CLASS_CODE2)\n",
					"where C.SPACE_CLASS_CODE1 IS NULL;\n",
					"\"\"\"\n",
					"RejSpaceClassDataDF=spark.sql(qry_RefIntegrityFailSpaceClassDF)\n",
					"RejSpaceClassDataDF.createOrReplaceTempView('RejSpaceClassDataView')\n",
					"\n",
					" \n",
					"RejDataViewqry2=\"\"\"\n",
					"SELECT COUNT(*) as CNT FROM RejSpaceClassDataView\n",
					";\n",
					"\"\"\"\n",
					"RejDataViewdf2=spark.sql(RejDataViewqry2)\n",
					"RejDataViewcnt2=RejDataViewdf2.count()\n",
					"\n",
					"if RejDataViewcnt2 == 0:\n",
					"    status = 'success'\n",
					"else:\n",
					"      RejSpaceClassDataDF.toPandas().to_csv(adls_reject_path+dateonly + '/' + 'IWTRIRIGAOfficeSpaceRejWithSpace.csv', sep=',', header=True, index=False)\n",
					"\n",
					"qry_IncrementalDataDF=\"\"\"\n",
					"select distinct CAST(COALESCE(TRIM(A.CAMPUS_ID),'')||'~'||COALESCE(TRIM(A.BLDG_ID),'')||'~'||COALESCE(TRIM(A.FLOOR_ID),'')||'~'||COALESCE(TRIM(A.SPACE_ID),'') AS VARCHAR(64)) as BUSINESS_ID,\n",
					"A.CAMPUS_ID,A.BLDG_ID as BUILDING_ID, A.FLOOR_ID, B.FLOOR_DESCR as FLOOR_DESCRIPTION,\n",
					"A.SPACE_ID,A.SPACE_DESCR as SPACE_DESCRIPTION, A.SPACE_CLASS_CODE1 as SPACE_CATEGORY_CODE,\n",
					"CASE WHEN LOCATE('-', trim(C.SPACE_CLASS_DESCR)) = 0 THEN C.SPACE_CLASS_DESCR \n",
					"ELSE substr(trim(C.SPACE_CLASS_DESCR),1,LOCATE('-', trim(C.SPACE_CLASS_DESCR))-1) \n",
					"END AS SPACE_CATEGORY_DESCRIPTION,A.SPACE_CLASS_CODE2 as SPACE_TYPE_CODE,\n",
					"CASE WHEN LOCATE('-', trim(C.SPACE_CLASS_DESCR)) = 0 THEN C.SPACE_CLASS_DESCR \n",
					"ELSE substr(trim(C.SPACE_CLASS_DESCR),1,LOCATE('-', trim(C.SPACE_CLASS_DESCR))-1) \n",
					"END AS SPACE_TYPE_DESCRIPTION,C.OCCUPANCY_TYPE , A.CAPACITY,A.AREA as AREA_SQUARE_FEET,\n",
					"A.OSCRE_CODE,A.WORKPOINT\n",
					"from SrcData A\n",
					"left outer join etlhubconfirmed.dhtr_space_floor_level B on trim(A.FLOOR_ID)=trim(B.FLOOR_ID)\n",
					"left outer join etlhubconfirmed.dhtr_space_class C ON \n",
					"trim(A.SPACE_CLASS_CODE1)=trim(C.SPACE_CLASS_CODE1) AND trim(A.SPACE_CLASS_CODE2)=trim(C.SPACE_CLASS_CODE2)\n",
					"where B.FLOOR_ID IS NOT NULL AND C.SPACE_CLASS_CODE1 IS NOT NULL \n",
					"\"\"\"\n",
					"FinalIncrementalDataDF=spark.sql(qry_IncrementalDataDF)\n",
					"\n",
					"col_list=[]\n",
					"for i in FinalIncrementalDataDF.columns:\n",
					"    col_list.append(i)\n",
					"\n",
					"# Add a checsum column to help identify the changed rows\n",
					"\n",
					"incrementalData_DF1 = FinalIncrementalDataDF.withColumn(\"nk_hash\",md5(natural_key))\n",
					"incrementalData_DF2 = incrementalData_DF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\n",
					"\n",
					"#sell_cyclecolhashDF.show()\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"select * from incrementalData_DF2"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#Create a dataframe with target deltalake table data with necessary columns\n",
					"\n",
					"existingDataDF=spark.sql(\"SELECT * FROM {}  WHERE CURRENT_IND='Y'\".format(tablename))\n",
					"#existingDataDF=spark.sql(\"SELECT tgt.* from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\n",
					"\n",
					"existingMaxKeyDF=spark.sql(\"SELECT MAX({}) existing_MAX_KEY from {} WHERE CURRENT_IND='Y'\".format(keycolumn,tablename))\n",
					"\n",
					"#existingMaxKeyDF=spark.sql(\"SELECT MAX(EMPLOYEE_KEY) existing_MAX_KEY from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\n",
					"\n",
					"# prefix all columns from target table with 'existing_'. This will help to differentiate columns when incremental and existing DF's are joined\n",
					"\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\n",
					"\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF1')\n",
					"\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1, col(natural_key) == col(\"existing_\" + natural_key), \"fullouter\")\n",
					"\n",
					"fullJoin2=fullJoin1.join(existingMaxKeyDF,None,\"CROSS\")\n",
					"\n",
					"fullJoin2.createOrReplaceTempView('fullJoin')\n",
					"\n",
					"fullJoin2.write \\\n",
					"  .format(\"delta\") \\\n",
					"  .mode(\"overwrite\") \\\n",
					"  .option(\"overwriteSchema\", \"true\") \\\n",
					"  .option(\"path\", \"abfss://etlhubfilestorage@adls4fsoetlhubdevuseast.dfs.core.windows.net/deltalake/staging/{}\".format(stagingtable)) \\\n",
					"  .saveAsTable(stagingtable)\n",
					"   #.option(\"overwriteSchema\", \"true\") \\  .save(\"\") \\"
				],
				"execution_count": 70
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Data Validation Checks :\n",
					"\n",
					"- Check for duplicates in Source data based on natural key\n",
					"- Check for partial data from source. That is if the file has expected number of rows\n",
					"- Check for duplicates in target delta lake table based on natural key\n",
					"- Referential Integrity checks\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry3=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM incrementalData_DF2 GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry4=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM {} WHERE CURRENT_IND='Y' GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry5=\"\"\"\n",
					"SELECT * FROM incrementalData_DF2\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"df3=spark.sql(qry3.format(natural_key,natural_key))\n",
					"cnt1=df3.count()\n",
					"\n",
					"print (cnt1)\n",
					"if cnt1 == 0:\n",
					"    print(\"No Duplicates in source data\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in source:\")\n",
					"    df3.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    #sys.exit(1)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"df4=spark.sql(qry4.format(natural_key,tablename,natural_key))\n",
					"cnt2=df4.count()\n",
					"\n",
					"print (cnt2)\n",
					"if cnt2 == 0:\n",
					"    print(\"no duplicates in target delta lake table\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in target delta lake table:\")\n",
					"    df4.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"\n",
					"df5=spark.sql(qry5)\n",
					"cnt3=df5.count()\n",
					"\n",
					"if cnt3 >= MinimumTririgaCampusCount:\n",
					"    print(\"The number of rows in source data is more than the threshold, data can be processed\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"The source data is having less number of rows than expected. Please check:\" )\n",
					"    print(cnt3)\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\n",
					"\n",
					"\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry_4_recon1=\"\"\"\n",
					"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable,tablename,natural_key,natural_key))\n",
					"print('New records or Inserts are:') \n",
					"df_4_recon1.show()\n",
					"\n",
					"qry_4_recon2=\"\"\"\n",
					"\n",
					"SELECT count(*) from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon2=spark.sql(qry_4_recon2.format(stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))\n",
					"print('Changed records or Updates are:') \n",
					"df_4_recon2.show()\n",
					"\n",
					"qry_4_recon3=\"\"\"\n",
					"SELECT count(*) from \n",
					"{} A\n",
					"join fullJoin B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' --AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"\n",
					"\"\"\"\n",
					"\n",
					"df_4_recon3=spark.sql(qry_4_recon3.format(tablename,natural_key,natural_key,natural_key))\n",
					"print('Soft Deletes are:') \n",
					"df_4_recon3.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"#Insert for New rows which are missing in target and present in source based on Natural Key.\n",
					"\n",
					"qry_4_recon1=\"\"\"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable, tablename, natural_key, natural_key))\n",
					"\n",
					"qry_ins_new_rows=\"\"\"\n",
					"INSERT INTO etlhubConfirmed.DHT_OFFICE_SPACE\n",
					"select \n",
					"COALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY BUSINESS_ID) AS SPACE_KEY, \n",
					"1 AS VERSION,\n",
					"BUSINESS_ID ,\n",
					"CAMPUS_ID ,\n",
					"BUILDING_ID ,\n",
					"FLOOR_ID ,\n",
					"FLOOR_DESCRIPTION ,\n",
					"SPACE_ID  ,\n",
					"SPACE_DESCRIPTION ,\n",
					"'Active' AS SPACE_STATUS ,\n",
					"SPACE_CATEGORY_CODE ,\n",
					"SPACE_CATEGORY_DESCRIPTION ,\n",
					"SPACE_TYPE_CODE,\n",
					"SPACE_TYPE_DESCRIPTION ,\n",
					"OCCUPANCY_TYPE ,\n",
					"CAPACITY ,\n",
					"AREA_SQUARE_FEET   ,\n",
					"OSCRE_CODE ,\n",
					"WORKPOINT  ,\n",
					"'' AS RSYP_ID ,\n",
					"'Y' AS CURRENT_IND,\n",
					"'extract_dt' AS EXTRACT_DT,\n",
					"'rec_start_dt' AS REC_START_DT,\n",
					"'9999-12-31 00:00:00' as REC_END_DT,\n",
					"'Tririga' AS SOURCE_SYSTEM,\n",
					"column_hash as REC_CHECKSUM,\n",
					"CURRENT_TIMESTAMP as IMG_LST_UPD_DT,\n",
					"CURRENT_TIMESTAMP AS IMG_CREATED_DT\n",
					"from DHTS_OFFICE_SPACE A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM etlhubConfirmed.DHT_OFFICE_SPACE B\n",
					"WHERE A.BUSINESS_ID=B.BUSINESS_ID\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"ins_new_rows_df=spark.sql(qry_ins_new_rows)\n",
					"#.format(tablename,natural_key,keycolumn,stagingtable,tablename,natural_key, natural_key))\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"INSERT INTO etlhubConfirmed.DHT_OFFICE_SPACE\r\n",
					"select * from (\r\n",
					"select \r\n",
					"COALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY BUSINESS_ID) AS SPACE_KEY, \r\n",
					"1 AS VERSION,\r\n",
					"BUSINESS_ID ,\r\n",
					"CAMPUS_ID ,\r\n",
					"BUILDING_ID ,\r\n",
					"FLOOR_ID ,\r\n",
					"FLOOR_DESCRIPTION ,\r\n",
					"SPACE_ID  ,\r\n",
					"SPACE_DESCRIPTION ,\r\n",
					"'Active' AS SPACE_STATUS ,\r\n",
					"SPACE_CATEGORY_CODE ,\r\n",
					"SPACE_CATEGORY_DESCRIPTION ,\r\n",
					"SPACE_TYPE_CODE,\r\n",
					"SPACE_TYPE_DESCRIPTION ,\r\n",
					"OCCUPANCY_TYPE ,\r\n",
					"CAPACITY ,\r\n",
					"AREA_SQUARE_FEET   ,\r\n",
					"OSCRE_CODE ,\r\n",
					"WORKPOINT  ,\r\n",
					"'' AS RSYP_ID ,\r\n",
					"'Y' AS CURRENT_IND,\r\n",
					"'2022-09-05 07:16:02' AS EXTRACT_DT,\r\n",
					"'2022-09-05 07:16:02' AS REC_START_DT,\r\n",
					"'9999-12-31 00:00:00' as REC_END_DT,\r\n",
					"'Tririga' AS SOURCE_SYSTEM,\r\n",
					"column_hash as REC_CHECKSUM,\r\n",
					"CURRENT_TIMESTAMP as IMG_LST_UPD_DT,\r\n",
					"CURRENT_TIMESTAMP AS IMG_CREATED_DT\r\n",
					"from DHTS_OFFICE_SPACE A \r\n",
					"WHERE existing_REC_CHECKSUM is null\r\n",
					"AND NOT EXISTS\r\n",
					"(SELECT 1 FROM etlhubConfirmed.DHT_OFFICE_SPACE B\r\n",
					"WHERE A.BUSINESS_ID=B.BUSINESS_ID\r\n",
					"and b.CURRENT_IND='Y'\r\n",
					"AND A.column_hash=B.REC_CHECKSUM)\r\n",
					") as dfg where SPACE_KEY <> 2   --122344\r\n",
					";\r\n",
					""
				],
				"execution_count": 78
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"qry_ins_new_rows_test=\"\"\"\n",
					"\n",
					"\tselect \n",
					"\tCOALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY {}) AS {} \n",
					",\t1 AS VERSION\n",
					",   {}\n",
					",   'Y' AS CURRENT_IND\n",
					",   '{}' AS EXTRACT_DT\n",
					",   '{}' AS REC_START_DT\n",
					",   '9999-12-31 00:00:00' as REC_END_DT\n",
					",   'Tririga' AS SOURCE_SYSTEM\n",
					",    column_hash as REC_CHECKSUM\n",
					",    CURRENT_TIMESTAMP as IMG_LST_UPD_DT\n",
					",    CURRENT_TIMESTAMP AS IMG_CREATED_DT\n",
					"    from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"d_test=spark.sql(qry_ins_new_rows_test.format(natural_key,keycolumn,my_string,extract_dt,rec_start_dt,stagingtable,tablename,natural_key, natural_key))\n",
					"print(qry_ins_new_rows_test.format(natural_key,keycolumn,my_string,extract_dt,rec_start_dt,stagingtable,tablename,natural_key, natural_key))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Update or expire the rows with existing instance of the changed rows:\n",
					"qry_4_upd_changes_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.{}\n",
					"AND LOWER(B.{}) = LOWER(B.existing_{}) \n",
					"and LOWER(B.column_hash) <> LOWER(B.existing_rec_checksum)\n",
					"AND A.CURRENT_IND='Y' AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET CURRENT_IND='N'\n",
					"    ,REC_END_DT= '{}' -  INTERVAL 1 seconds\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					";\n",
					"\"\"\"\n",
					"f=spark.sql(qry_4_upd_changes_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key,natural_key,rec_start_dt))\n",
					""
				],
				"execution_count": 81
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Insert for changed rows which are missing in target and present in source based on Natural Key.\n",
					"\n",
					"qry_ins_changed_rows=\"\"\"\n",
					"INSERT INTO {}\n",
					"\tselect \n",
					"    existing_CAMPUS_KEY\n",
					",\t1 + existing_VERSION\n",
					"BUSINESS_ID ,\n",
					"CAMPUS_ID ,\n",
					"BUILDING_ID ,\n",
					"FLOOR_ID ,\n",
					"FLOOR_DESCRIPTION ,\n",
					"SPACE_ID  ,\n",
					"SPACE_DESCRIPTION ,\n",
					"'Active' AS SPACE_STATUS ,\n",
					"SPACE_CATEGORY_CODE ,\n",
					"SPACE_CATEGORY_DESCRIPTION ,\n",
					"SPACE_TYPE_CODE,\n",
					"SPACE_TYPE_DESCRIPTION ,\n",
					"OCCUPANCY_TYPE ,\n",
					"CAPACITY ,\n",
					"AREA_SQUARE_FEET   ,\n",
					"OSCRE_CODE ,\n",
					"WORKPOINT  ,\n",
					"'' AS RSYP_ID ,\n",
					"'Y' AS CURRENT_IND,\n",
					"'2022-09-05 07:16:02' AS EXTRACT_DT,\n",
					"'2022-09-05 07:16:02' AS REC_START_DT,\n",
					"'9999-12-31 00:00:00' as REC_END_DT,\n",
					"'Tririga' AS SOURCE_SYSTEM,\n",
					"column_hash as REC_CHECKSUM,\n",
					"CURRENT_TIMESTAMP as IMG_LST_UPD_DT,\n",
					"existing_IMG_CREATED_DT\n",
					"from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"e=spark.sql(qry_ins_changed_rows.format(tablename,extract_dt,rec_start_dt,stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Soft Deletes - Update Active_Ind for the rows no longer active in source:\n",
					"\n",
					"qry_4_upd_deleted_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' --AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET CURRENT_IND='N'\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					"    ,REC_END_DT= '{}' -  INTERVAL 1 seconds\n",
					"\n",
					";\n",
					"\"\"\"\n",
					"g=spark.sql(qry_4_upd_deleted_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key,rec_start_dt))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry3=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM incrementalData_DF2 GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry4=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM {} WHERE CURRENT_IND='Y' GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"\n",
					"df4=spark.sql(qry4.format(natural_key,tablename,natural_key))\n",
					"cnt2=df4.count()\n",
					"\n",
					"print (cnt2)\n",
					"if cnt2 == 0:\n",
					"    print(\"no duplicates in target delta lake table\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in target delta lake table:\")\n",
					"    df4.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\n",
					""
				],
				"execution_count": 13
			}
		]
	}
}