{
	"name": "Notebook 6",
	"properties": {
		"folder": {
			"name": "Srilatha"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPoolKyn001494",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d4474650-cef4-43b8-a646-4d01d329777c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPoolKyn001494",
				"name": "sPoolKyn001494",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPoolKyn001494",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"#set the data lake file location:\r\n",
					"file_location = \"abfss://project@adls4fsoetlhubdevuseast.dfs.core.windows.net/sell_cycle_2022.csv\"\r\n",
					" \r\n",
					"#read in the data to dataframe df\r\n",
					"df = spark.read.format(\"csv\").option(\"inferSchema\", \"true\").option(\"header\", \"true\").option(\"delimiter\",\",\").load(file_location)\r\n",
					" \r\n",
					"#display the dataframe\r\n",
					"display(df)\r\n",
					"\r\n",
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"#set the data lake file location:\r\n",
					"file_location = \"abfss://project@adls4fsoetlhubdevuseast.dfs.core.windows.net/sell_cycle_2022.csv\"\r\n",
					" \r\n",
					"#read in the data to dataframe df\r\n",
					"df = spark.read.format(\"csv\").option(\"inferSchema\", \"true\").option(\"header\", \"true\").option(\"delimiter\",\",\").load(file_location)\r\n",
					" \r\n",
					"#display the dataframe\r\n",
					"display(df)\r\n",
					"\r\n",
					"df.printSchema()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"#import necessary python libraries\r\n",
					"\r\n",
					"from azure.storage.blob import BlobClient\r\n",
					"import pandas as pd\r\n",
					"from io import StringIO\r\n",
					"from pyspark.sql.functions import md5, concat_ws\r\n",
					"from sqlite3 import connect\r\n",
					"from pyspark.sql import functions as F\r\n",
					"#conn = connect(':memory:')\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession \r\n",
					"from pyspark.sql.types import * \r\n",
					"\r\n",
					"\r\n",
					"CREATE TABLE etlhubConfirmed.SELL_CYCLE_2022\r\n",
					"     (SIEBEL_SALES_STAGE_CODE string,  \r\n",
					"      SIEBEL_SALES_STAGE_NAME string,  \r\n",
					"      SSM_STEP_NO string,  \r\n",
					"      SSM_STEP_NAME string)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%sql\r\n",
					"CREATE TABLE IF NOT EXISTS DBXDH.DHTS_SELL_CYCLE_2022\r\n",
					"USING CSV\r\n",
					"LOCATION 'abfss://project@adls4fsoetlhubdevuseast.dfs.core.windows.net/sell_cycle_2022.csv'"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"\r\n",
					"def write_csv_with_specific_file_name(sc, df, path, filename):\r\n",
					"    df.repartition(1).write.option(\"header\", \"true\").format(\"csv\").save(path)\r\n",
					"    try:\r\n",
					"        sc_uri = sc._gateway.jvm.java.net.URI\r\n",
					"        sc_path = sc._gateway.jvm.org.apache.hadoop.fs.Path\r\n",
					"        file_system = sc._gateway.jvm.org.apache.hadoop.fs.FileSystem\r\n",
					"        configuration = sc._gateway.jvm.org.apache.hadoop.conf.Configuration\r\n",
					"        fs = file_system.get(sc_uri(\"hdfs://{HDFS_IP/NAME}\"), configuration())\r\n",
					"        src_path = None\r\n",
					"        status = fs.listStatus(sc_path(path))\r\n",
					"        for fileStatus in status:\r\n",
					"            temp = fileStatus.getPath().toString()\r\n",
					"            if \"part\" in temp:\r\n",
					"                src_path = sc_path(temp)\r\n",
					"        dest_path = sc_path(path + filename)\r\n",
					"        if fs.exists(src_path) and fs.isFile(src_path):\r\n",
					"            fs.rename(src_path, dest_path)\r\n",
					"            fs.delete(src_path, True)\r\n",
					"    except Exception as e:\r\n",
					"        raise Exception(\"Error renaming the part file to {}:\".format(filename, e))\r\n",
					"\r\n",
					"\r\n",
					"def create_dataframe(spark):\r\n",
					"    simple_data = [(\"James\", \"Sales\", \"NY\", 90000),\r\n",
					"                   (\"Michael\", \"Sales\", \"NY\", 86000),\r\n",
					"                   (\"Robert\", \"Sales\", \"CA\", 81000),\r\n",
					"                   (\"Maria\", \"Finance\", \"CA\", 90000),\r\n",
					"                   (\"Raman\", \"Finance\", \"CA\", 99000),\r\n",
					"                   (\"Scott\", \"Finance\", \"NY\", 83000),\r\n",
					"                   (\"Jen\", \"Finance\", \"NY\", 79000),\r\n",
					"                   (\"Jeff\", \"Marketing\", \"CA\", 80000),\r\n",
					"                   (\"Kumar\", \"Marketing\", \"NY\", 91000)\r\n",
					"                   ]\r\n",
					"\r\n",
					"    schema = [\"employee_name\", \"department\", \"state\", \"salary\"]\r\n",
					"    return spark.createDataFrame(data=simple_data, schema=schema)\r\n",
					"\r\n",
					"\r\n",
					"if __name__ == '__main__':\r\n",
					"    spark = SparkSession.builder.getOrCreate()\r\n",
					"    df = create_dataframe(spark)\r\n",
					"    write_csv_with_specific_file_name(spark.sparkContext, df, \"abfss://etlhubfilestorage@adls4fsoetlhubdevuseast.dfs.core.windows.net/reject/campus\", \"/OUTPUT_FILE_NAME\")\r\n",
					""
				],
				"execution_count": 1
			}
		]
	}
}