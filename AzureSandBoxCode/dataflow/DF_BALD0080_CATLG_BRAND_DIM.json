{
	"name": "DF_BALD0080_CATLG_BRAND_DIM",
	"properties": {
		"folder": {
			"name": "PGMP/Dimension"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "sortedLookupData"
				},
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				},
				{
					"name": "renamedColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     current_user as string",
				"}",
				"source(output(",
				"          MAX_ID as integer,",
				"          ROW_NUM as long,",
				"          CATLG_BRAND_CD as string,",
				"          CATLG_BRAND_DESC as string,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     CB.MAX_ID as MAX_ID,\\n     CB.ROW_NUM as ROW_NUM,\\n     CB.CATLG_BRAND_CD,\\n     CB.CATLG_BRAND_DESC,\\n     CB.SRC_CRETD_TMS,\\n     CB.SRC_CRETD_USER_ID,\\n     CB.SRC_UPDTD_TMS,\\n     CB.SRC_UPDTD_USER_ID,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID\\nFrom\\n     (\\n          Select\\n               (Select coalesce(max(CATLG_BRAND_DIM_UID), 0) from PGMPDM.CATLG_BRAND_DIM) as MAX_ID,\\n               ROW_NUMBER() over (order by CTLG_BRND_CODE) as ROW_NUM,\\n               CTLG_BRND_CODE as CATLG_BRAND_CD,\\n               CTLG_BRND_DESC as CATLG_BRAND_DESC,\\n               CREATED_TS as SRC_CRETD_TMS,\\n               CREATED_USERID as SRC_CRETD_USER_ID,\\n               UPDATED_TS as SRC_UPDTD_TMS,\\n               UPDATED_USERID as SRC_UPDTD_USER_ID\\n          From\\n               APPFUN.CATALOG_BRAND\\n          union all\\n          Select\\n               0 as MAX_ID,\\n               -1 as ROW_NUM,\\n               \\'UNK\\' as CATLG_BRAND_CD,\\n               \\'Unknown\\' as CATLG_BRAND_DESC,\\n               CURRENT_TIMESTAMP as SRC_CRETD_TMS,\\n               CURRENT_USER as SRC_CRETD_USER_ID,\\n               CURRENT_TIMESTAMP as SRC_UPDTD_TMS,\\n               CURRENT_USER as SRC_UPDTD_USER_ID\\n          From\\n               sys.dm_db_resource_stats\\n     ) CB\\n     left join (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          From\\n               PGMPDM.ZAUX_ETL_JOBS\\n          Where\\n               ETL_JOB_NM = \\'BALD0080_CATLG_BRAND_DIM\\'\\n     ) JOB\\n     on 1 = 1\\n     left join (\\n          Select\\n               ETL_EXCTN_ID,\\n               ETL_PARAM_START_TMS,\\n               ETL_PARAM_END_TMS\\n          from\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          Where\\n               IS_CURR_IND = \\'Y\\'\\n     ) FIL\\n     on 1 = 1\\n     left join (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          From\\n               PGMPDM.SRC_SYS_DIM\\n          Where\\n               SRC_SYS_CD = \\'PGMP\\'\\n     ) SYS\\n     on 1 = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          CATLG_BRAND_CD as string,",
				"          CATLG_BRAND_DESC as string,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          SRC_SYS_DIM_UID as integer,",
				"          ETL_JOB_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     CATLG_BRAND_CD,\\n     CATLG_BRAND_DESC,\\n     SRC_CRETD_TMS,\\n     SRC_CRETD_USER_ID,\\n     SRC_UPDTD_TMS,\\n     SRC_UPDTD_USER_ID,\\n     SRC_SYS_DIM_UID,\\n     ETL_JOB_ID\\nFrom\\n     PGMPDM.CATLG_BRAND_DIM',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"renamedColumns sort(asc(LKP_CATLG_BRAND_CD, false)) ~> sortedLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"CDCval split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"getSourceData, sortedLookupData join(CATLG_BRAND_CD == LKP_CATLG_BRAND_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          CATLG_BRAND_DIM_UID,",
				"          CATLG_BRAND_CD,",
				"          CATLG_BRAND_DESC,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(CATLG_BRAND_DIM_UID = MAX_ID+ROW_NUM,",
				"          DM_CRETD_USER_ID = $current_user,",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          CATLG_BRAND_CD,",
				"          CATLG_BRAND_DESC,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"mergedData derive(ROW_STATUS = case(CATLG_BRAND_CD == toString(null()) && LKP_CATLG_BRAND_CD != toString(null()), 'D', case(CATLG_BRAND_CD != toString(null()) && LKP_CATLG_BRAND_CD == toString(null()), 'I', 'U'))) ~> CDCval",
				"getLookupData select(mapColumn(",
				"          each(match(true()),",
				"               'LKP_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamedColumns",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CATLG_BRAND_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CNTRCT_TYPE_DIM_UID'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CATLG_BRAND_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}