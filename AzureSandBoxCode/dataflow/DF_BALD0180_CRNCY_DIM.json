{
	"name": "DF_BALD0180_CRNCY_DIM",
	"properties": {
		"description": "Job Creation: 30-06-2022\nJob Name: DF_BALD0180_CRNCY_DIM\nCreated By: Subramanian R",
		"folder": {
			"name": "PGMP/Dimension"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "sortedLookupData"
				},
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				},
				{
					"name": "renamedColumns"
				},
				{
					"name": "dropUnchangedRows"
				}
			],
			"scriptLines": [
				"parameters{",
				"     current_user as string",
				"}",
				"source(output(",
				"          MAX_ID as integer,",
				"          ROW_NUM as long,",
				"          CRNCY_CD as string,",
				"          CRNCY_NM as string,",
				"          LOCAL_CURRENCY_AS_BASE as decimal(18,10),",
				"          USD_AS_BASE as decimal(18,10),",
				"          TO_USD_DIVISOR_SPOT as decimal(26,13),",
				"          SPOT_DATE as date,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          HASHED_VAL as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     (Select coalesce(max(CRNCY_DIM_UID), 0) from PGMPDM.CRNCY_DIM) as MAX_ID,\\n     ROW_NUMBER() over (order by C.CRNCY_CD) as ROW_NUM,\\n     cast(C.CRNCY_CD as char(3)) as CRNCY_CD,\\n     C.CRNCY_NM,\\n     C.LOCAL_CURRENCY_AS_BASE,\\n     C.USD_AS_BASE,\\n     C.TO_USD_DIVISOR_SPOT,\\n     C.SPOT_DATE,\\n     C.SRC_CRETD_TMS,\\n     C.SRC_CRETD_USER_ID,\\n     C.SRC_UPDTD_TMS,\\n     C.SRC_UPDTD_USER_ID,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n     HashBytes(\\'SHA2_256\\', \\n          coalesce(CRNCY_CD, \\'\\') + \\n          coalesce(CRNCY_NM, \\'\\') + \\n          coalesce(cast(LOCAL_CURRENCY_AS_BASE as varchar), \\'\\') + \\n          coalesce(cast(USD_AS_BASE as varchar), \\'\\') + \\n          coalesce(cast(TO_USD_DIVISOR_SPOT as varchar), \\'\\') + \\n          cast(SRC_CRETD_TMS as varchar) + \\n          cast(SRC_CRETD_USER_ID as varchar) + \\n          cast(SRC_UPDTD_TMS as varchar) + \\n          cast(SRC_UPDTD_USER_ID as varchar) + \\n          cast(ETL_JOB_ID as varchar) + \\n          cast(SRC_SYS_DIM_UID as varchar)\\n     ) as HASHED_VAL\\nFrom\\n     (\\n          Select\\n               C.CURRENCY_CD as CRNCY_CD,\\n               C.CURRENCY_NAME as CRNCY_NM,\\n               CPR.LOCAL_CURRENCY_AS_BASE,\\n               cast(C.TO_USD_DIVISOR as decimal(18,10)) as USD_AS_BASE,\\n               C.TO_USD_DIVISOR_SPOT as TO_USD_DIVISOR_SPOT,\\n               C.SPOT_DATE as SPOT_DATE,\\n               C.CREATED_TS as SRC_CRETD_TMS,\\n               C.CREATED_USERID as SRC_CRETD_USER_ID,\\n               C.UPDATED_TS as SRC_UPDTD_TMS,\\n               C.UPDATED_USERID as SRC_UPDTD_USER_ID\\n          From\\n               APPFUN.CURRENCY as C\\n               left join\\n               APPFUN.CURRENCY_PLAN_RATE as CPR\\n               on C.CURRENCY_CD = CPR.CURRENCY_CD\\n          union all\\n          Select\\n               \\'UNK\\' as CRNCY_CD,\\n               \\'Unknown\\' as CRNCY_NM,\\n               1.0 as LOCAL_CURRENCY_AS_BASE,\\n               1.0 as USD_AS_BASE,\\n               1.0 as TO_USD_DIVISOR_SPOT,\\n               NULL as SPOT_DATE,\\n               CURRENT_TIMESTAMP as SRC_CRETD_TMS,\\n               CURRENT_USER as SRC_CRETD_USER_ID,\\n               CURRENT_TIMESTAMP as SRC_UPDTD_TMS,\\n               CURRENT_USER as SRC_UPDTD_USER_ID\\n     ) C\\n     left join (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          From\\n               PGMPDM.ZAUX_ETL_JOBS\\n          Where\\n               ETL_JOB_NM = \\'BALD0180_CRNCY_DIM\\'\\n     ) JOB\\n     on 1 = 1\\n     left join (\\n          Select\\n               ETL_EXCTN_ID,\\n               ETL_PARAM_START_TMS,\\n               ETL_PARAM_END_TMS\\n          from\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          Where\\n               IS_CURR_IND = \\'Y\\'\\n     ) FIL\\n     on 1 = 1\\n     left join (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          From\\n               PGMPDM.SRC_SYS_DIM\\n          Where\\n               SRC_SYS_CD = \\'PGMP\\'\\n     ) SYS\\n     on 1 = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          CRNCY_CD as string,",
				"          CRNCY_NM as string,",
				"          LOCAL_CURRENCY_AS_BASE as decimal(18,10),",
				"          USD_AS_BASE as decimal(18,10),",
				"          TO_USD_DIVISOR_SPOT as decimal(26,13),",
				"          SPOT_DATE as date,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          HASHED_VAL as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     CRNCY_CD,\\n     CRNCY_NM,\\n     LOCAL_CURRENCY_AS_BASE,\\n     USD_AS_BASE,\\n     TO_USD_DIVISOR_SPOT,\\n     SPOT_DATE,\\n     SRC_CRETD_TMS,\\n     SRC_CRETD_USER_ID,\\n     SRC_UPDTD_TMS,\\n     SRC_UPDTD_USER_ID,\\n     ETL_JOB_ID,\\n     SRC_SYS_DIM_UID,\\n     HashBytes(\\'SHA2_256\\', \\n          coalesce(CRNCY_CD, \\'\\') + \\n          coalesce(CRNCY_NM, \\'\\') + \\n          coalesce(cast(LOCAL_CURRENCY_AS_BASE as varchar), \\'\\') + \\n          coalesce(cast(USD_AS_BASE as varchar), \\'\\') + \\n          coalesce(cast(TO_USD_DIVISOR_SPOT as varchar), \\'\\') + \\n          cast(SRC_CRETD_TMS as varchar) + \\n          cast(SRC_CRETD_USER_ID as varchar) + \\n          cast(SRC_UPDTD_TMS as varchar) + \\n          cast(SRC_UPDTD_USER_ID as varchar) + \\n          cast(ETL_JOB_ID as varchar) + \\n          cast(SRC_SYS_DIM_UID as varchar)\\n     ) as HASHED_VAL\\nFrom\\n     PGMPDM.CRNCY_DIM\\n',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"renamedColumns sort(asc(LKP_CRNCY_CD, false)) ~> sortedLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"dropUnchangedRows split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"getSourceData, sortedLookupData join(CRNCY_CD == LKP_CRNCY_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          CRNCY_DIM_UID,",
				"          CRNCY_CD,",
				"          CRNCY_NM,",
				"          LOCAL_CURRENCY_AS_BASE,",
				"          USD_AS_BASE,",
				"          TO_USD_DIVISOR_SPOT,",
				"          SPOT_DATE,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(CRNCY_DIM_UID = MAX_ID+ROW_NUM,",
				"          DM_CRETD_USER_ID = $current_user,",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          CRNCY_CD,",
				"          CRNCY_NM,",
				"          LOCAL_CURRENCY_AS_BASE,",
				"          USD_AS_BASE,",
				"          TO_USD_DIVISOR_SPOT,",
				"          SPOT_DATE,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"mergedData derive(ROW_STATUS = case(CRNCY_CD == toString(null()) && LKP_CRNCY_CD != toString(null()), 'D', case(CRNCY_CD != toString(null()) && LKP_CRNCY_CD == toString(null()), 'I', case(HASHED_VAL == LKP_HASHED_VAL, 'L', 'U')))) ~> CDCval",
				"getLookupData select(mapColumn(",
				"          each(match(true()),",
				"               'LKP_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamedColumns",
				"CDCval filter(ROW_STATUS != 'L') ~> dropUnchangedRows",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CRNCY_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CRNCY_CD'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CRNCY_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}