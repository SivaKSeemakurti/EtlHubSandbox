{
	"name": "DF_BALD0330_PCR_CRC_DIM",
	"properties": {
		"description": "Job Creation: 12-07-2022\nJob Name: DF_BALD0330_PCR_CRC_DIM\nCreated By: Subramanian R",
		"folder": {
			"name": "PGMP/Dimension"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "sortedLookupData"
				},
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				},
				{
					"name": "dropUnchangedRows"
				}
			],
			"scriptLines": [
				"parameters{",
				"     current_user as string",
				"}",
				"source(output(",
				"          MAX_ID as integer,",
				"          ROW_NUM as integer,",
				"          PRICE_TYPE_CD as string,",
				"          PRICE_TYPE_DESC as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          HASHED_VAL as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     C.PROC_ID as PCR_CRC_DIM_UID,\\n     coalesce(PPT.PRPSL_PRICE_TERM_DIM_UID, -1) as PRPSL_PRICE_TERM_DIM_UID,\\n     coalesce(C.COMPLEXITY, -1) as CMPLXTY_DIM_UID,\\n     coalesce(RSTD.RQST_STAT_DIM_UID, -1) as RQST_STAT_DIM_UID,\\n     coalesce(RT.RQST_TYPE_DIM_UID, -1) as RQST_TYPE_DIM_UID,\\n     C.RQST_RECEIV_DATE as RQST_RCVD_DT,\\n     C.PRPSL_RQST_DATE as PRPSL_RQST_DT,\\n     C.CLIENT_REVISD_PRPSL_RQSTD_DT as CLNT_RVSD_PRPSL_RQSTD_DT,\\n     C.PRPSL_SENT_TO_CLIENT_DATE as PRPSL_SENT_TO_CLNT_DT,\\n     TGR.PRPSL_SENT_TO_CLNT_DT as PRPSL_SENT_TO_CLNT_DT_WD,\\n     C.PRPSL_ACCEPTED_DATE as PRPSL_ACCPTD_DT,\\n     TGR.PRPSL_ACCPTD_DT as PRPSL_ACCPTD_DT_WD,\\n     C.PRPSL_REJCT_DATE as PRPSL_REJCT_DT,\\n     C.RQST_IMPLMNT_COMPLT_DATE as RQST_IMPLMNT_CMPLTD_DT,\\n     C.CLIENT_RVSD_RQST_IMPL_CMPL_DT as CLNT_RVSD_RQST_IMPL_CMPL_DT,\\n     R.IMPLMNT_RDY_CUST_ACCEPT_DT as IMPLMNT_READY_CUST_ACCEPT_DT,\\n     TGR.IMPLMTN_READY_DT as IMPLMNT_READY_CUST_ACCEPT_DT_WD,\\n     C.PRPSL_EXP_DATE as PRPSL_EXP_DT,\\n     TGR.PRPSL_DSPSN_DT as PRPSL_DSPSN_DT_WD,\\n     P.ON_HOLD_DATE as ON_HOLD_DT,\\n     P.WITHDRAWN_DATE as WITHDRWN_DT,\\n     P.DELETED_DATE as DELD_DT,\\n     coalesce(R.CLIENT_REVISD_PRPSL_RQSTD_DT, R.PRPSL_RQST_DATE) as LATEST_PRPSL_RQSTD_DT,\\n     coalesce(R.CLIENT_RVSD_RQST_IMPL_CMPL_DT, R.RQST_IMPLMNT_COMPLT_DATE) as LATEST_IMPLMNT_RQSTD_DT,\\n     case\\n          when (TGR.PRPSL_ACCPTD_DT is null and R.PRPSL_REJCT_DATE is not null) then R.PRPSL_REJCT_DATE\\n          when (TGR.PRPSL_ACCPTD_DT is not null and R.PRPSL_REJCT_DATE is null) then TGR.PRPSL_ACCPTD_DT\\n          when (TGR.PRPSL_ACCPTD_DT < R.PRPSL_REJCT_DATE) then TGR.PRPSL_ACCPTD_DT\\n          else R.PRPSL_REJCT_DATE\\n     end as PRPSL_OR_REJCT_DT,\\n     case\\n          when WLZ.WINLOSS_CD =\\'WIN\\' then C.PRPSL_ACCEPTED_DATE\\n          when WLZ.WINLOSS_CD =\\'LOSS\\' then\\n               case\\n               when R.PRPSL_REJCT_DATE is null then P.WITHDRAWN_DATE\\n               else R.PRPSL_REJCT_DATE\\n               end\\n          when WLZ.WINLOSS_CD =\\'UNK\\' then NULL\\n     end as MERGED_DT,\\n     C.CLIENT_ACCNTG_CD as CLNT_ACCNTG_CD,\\n     C.CLIENT_CNTCT_NAME, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.CLIENT_CNTCT_NAME, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as CLNT_CNTCT_NM,\\n     C.CLIENT_AFFECT_AREA as CLNT_AFFCT_AREA_TXT,\\n     C.AGREEMENT_REF_DETAILS as AGRMT_REF_DTL_TXT,\\n     C.SRVC_TYPE as SRVC_TYPE_TXT,\\n     C.CLIENT_APPRV as CLNT_APPRVL_NUM,\\n     C.RFS_GROUP_NAME as RFS_GROUP_NM,\\n     C.SRVC_PRVDR_ORG as SRVC_PRVDR_ORGNZN_TXT,\\n     cast(C.PREDEFINED_SRVCS_DESCR as varchar(4096)) as PREDEFND_SRVCS_DESC,\\n     C.SIEBEL_OPPORTUNITY_NUMBER as SIEBEL_OPPRTNTY_NUM,\\n     C.BTT as BTT_NUM,\\n     C.SOLTN_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.SOLTN_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_OWNR_TXT,\\n     C.DLVR_COORDTR, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.DLVR_COORDTR, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as DLVR_CRDNTR_TXT,\\n     C.SOLTN_DESIGNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.SOLTN_DESIGNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_DSGNR_TXT,\\n     C.CLAIM_ACCNT_CD as CLAIM_ACCNT_CD,\\n     cast(C.CLAIM_WORK_ITEM_CDS as varchar(50)) as CLAIM_WORK_ITEM_CD,\\n     C.RESRC_SUMRY_PERSNL_INVOLV_IND as RSRC_SUMRY_PRSNL_INVOLV_IND,\\n     C.RESRC_SUMRY_SERVER_COM_IND as RSRC_SUMRY_SERVER_COM_IND,\\n     C.RESRC_SUMRY_STORAGE_COM_IND as RSRC_SUMRY_STRG_COM_IND,\\n     C.RESRC_SUMRY_HARDWARE_COM_IND as RSRC_SUMRY_HW_COM_IND,\\n     C.RESRC_SUMRY_SFTWR_COM_IND as RSRC_SUMRY_SOFTWR_COM_IND,\\n     C.REJECT_REASON_CD as RJCT_RSN_CD,\\n     C.REJECT_SRC_CD as RJCT_SRC_CD,\\n     C.REJECT_EXPLNTN as RJCT_EXPLNN_TXT,\\n     C.PRICE_TYPE_CDS as PRICE_TYPE_CD,\\n     C.REASON_CDS as RSN_CD,\\n     C.PURCHS_ORDR_NM as PURCHS_ORDR_NM,\\n     C.UNSOLICITED_RQST_IND as UNSLCTD_RQST_IND,\\n     C.CNTRCT_CHNG_REQD_IND as CNTRCT_CHNG_RQRD_IND,\\n     C.OATS_RCD_REQD_IND as OATS_RCD_RRQRD_IND,\\n     C.NON_STD_T_AND_C_IND as NON_STD_T_AND_C_IND,\\n     C.TRAVEL_INVOICED_IND as TRVL_INVC_IND,\\n     C.TERMINATN_CHRGS_IND as TERMNTN_CHRGS_IND,\\n     C.RENEWAL_MNTH as RNWL_MNTH_CD,\\n     C.BYPASS_SOLN_DSGN_IND as BYPSS_SLTN_DSGN_IND,\\n     C.PRPSL_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.PRPSL_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as PRPSL_OWNR_TXT,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n     case when D.PROC_ID is null then 0 else 1 end as IS_DELETED,\\n     cast(PCR_FLAGS.HAS_PRNT_RFS_IND as char(1)) as HAS_PRNT_RFS_IND,\\n     PCR_FLAGS.PRNT_PROC_DIM_UID,\\n     PCR_FLAGS.PRJCT_DIM_UID,\\n     C.L30_OFFRNG_1_CD as L30_OFFRNG_ID_1,\\n     C.L30_OFFRNG_2_CD as L30_OFFRNG_ID_2,\\n     C.L30_OFFRNG_3_CD as L30_OFFRNG_ID_3,\\n     S.GEO_DIM_UID,\\n     S.ORIGINATING_ORG AS ORGNTG_ORG,\\n     S.PRICER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(S.PRICER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as PRICER_NM,\\n     C.SOLTN_TEAM,\\n     C.ERO_CHECKED AS ERO_CHCKD_DT, \\n     C.EA_CHECKED as EA_CHCKD_DT,\\n     C.CE_CHECKED as CE_CHCKD_DT,\\n     C.EXPORT_REGULATION as EXPORT_REG,\\n     C.ENVIORMENTAL_AFFAIRS AS ENVMNTL_AFF,\\n     C.COMPLIANCE_ENGG AS CMPLNCE_ENGG,\\n     CAST(C.CNTRY AS CHAR(2)) AS GROSS_TCP_CTRY_CD,\\n     GEO.GEO_DIM_UID AS GROSS_TCP_GEO_DIM_UID\\nFrom\\n     APPFUN.PCR C\\n     inner join\\n     PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n     on C.PROC_ID = TGR.PROC_ID\\n     inner join\\n     APPFUN.PROC P\\n     on C.PROC_ID = P.PROC_ID\\n     left join\\n     APPFUN.RQST R\\n     on C.PROC_ID = R.PROC_ID\\n     left join\\n     PGMPDM.RQST_TYPE_DIM RT\\n     -- As the Catalog Only records were defined at the PROC level, an exception should be made to\\n     -- ensure that this category is taken into consideration\\n     on case when P.PROC_TYPE_ID = \\'CTLGONLY\\' then \\'C\\' else C.RQST_TYPE end = RT.RQST_TYPE_DIM_CD\\n     left join\\n     PGMPDM.ZAUX_DELD_PROC_ID D\\n     on C.PROC_ID = D.PROC_ID\\n     left join\\n     PGMPDM.PRPSL_PRICE_TERM_DIM PPT\\n     on R.PRPSL_PRICING_TERMS = PPT.PRPSL_PRICE_TERM_DIM_CD\\n     left join (\\n          Select\\n               P.PROC_ID,\\n               P.STATE,\\n               R.PRPSL_REJCT_DATE,\\n               WSD.WKFLW_STEP_SEQ,\\n               case\\n                    when (P.STATE in (\\'A\\', \\'C\\') and WSD.WKFLW_STEP_SEQ between 1160 and 1250) then \\'WON\\'\\n                    when ((P.STATE = \\'W\\' and WSD.WKFLW_STEP_SEQ between 1135 and 1150) or (P.STATE in (\\'C\\', \\'Q\\', \\'R\\') and R.PRPSL_REJCT_DATE is not null)) then \\'LOST\\'\\n                    when (WSD.WKFLW_STEP_SEQ between 1135 and 1145) then \\'WIP-CR\\'\\n                    when ((WSD.WKFLW_STEP_SEQ between 1010 and 1131) or WSD.WKFLW_STEP_SEQ = 1150) then \\'WIP-NWC\\'\\n                    else \\'UNK\\'\\n               end as PROC_STATUS\\n          From\\n               PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n               inner join\\n               APPFUN.PROC P\\n               on TGR.PROC_ID = P.PROC_ID\\n               inner join\\n               APPFUN.PCR R\\n               on P.PROC_ID = R.PROC_ID\\n               inner join\\n               APPFUN.PROC_STEP_DATA PSD\\n               on\\n                    P.PROC_ID = PSD.PROC_ID and\\n                    P.CUR_PROC_STEP_DATA_ID = PSD.PROC_STEP_DATA_ID\\n               inner join\\n               APPFUN.WKFLW_STEP_DEF WSD\\n               on\\n                    PSD.WKFLW_STEP_DEF_ID = WSD.WKFLW_STEP_DEF_ID and\\n                    PSD.WKFLW_DEF_ID = WSD.WKFLW_DEF_ID\\n     ) RST\\n     on P.PROC_ID = RST.PROC_ID\\n     left join\\n     PGMPDM.RQST_STAT_DIM RSTD\\n     on RST.PROC_STATUS = RSTD.RQST_STAT_DIM_CD\\n     left join \\n     PGMPDM.GEO_DIM GEO\\n     on C.CNTRY = GEO.SRGN_CD\\n     left join (\\n          Select\\n               S.PROC_ID,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV1_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then \\'Y\\'\\n                    else \\'N\\'\\n               end as HAS_PRNT_RFS_IND,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV1_PROC_ID = 0 then S.PLV0_PROC_ID\\n                    when S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then S.PLV1_PROC_ID\\n                    when S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then S.PLV2_PROC_ID\\n                    when S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then S.PLV3_PROC_ID\\n                    when S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then S.PLV4_PROC_ID\\n                    when S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then S.PLV5_PROC_ID\\n                    else -1\\n               end as PRNT_PROC_DIM_UID,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then S.PLV0_PROC_ID\\n                    when S.PLV1_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then S.PLV1_PROC_ID\\n                    when S.PLV2_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then S.PLV2_PROC_ID\\n                    when S.PLV3_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then S.PLV3_PROC_ID\\n                    when S.PLV4_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then S.PLV4_PROC_ID\\n                    -- There is not need to level 5, since it won\\'t have a valid parent\\n                    else -1\\n               end as PRJCT_DIM_UID\\n          From (\\n               Select\\n                    B.PROC_ID,\\n                    B.PROC_TYPE_ID,\\n                    coalesce(B.PLV0_PROC_ID, 0) as PLV0_PROC_ID,\\n                    B.PLV0_PROC_TYPE_ID,\\n                    coalesce(B.PLV1_PROC_ID, 0) as PLV1_PROC_ID,\\n                    B.PLV1_PROC_TYPE_ID,\\n                    coalesce(B.PLV2_PROC_ID, 0) as PLV2_PROC_ID,\\n                    B.PLV2_PROC_TYPE_ID,\\n                    coalesce(B.PLV3_PROC_ID, 0) as PLV3_PROC_ID,\\n                    B.PLV3_PROC_TYPE_ID,\\n                    coalesce(B.PLV4_PROC_ID, 0) as PLV4_PROC_ID,\\n                    B.PLV4_PROC_TYPE_ID,\\n                    coalesce(B.PLV5_PROC_ID, 0) as PLV5_PROC_ID,\\n                    P.PROC_TYPE_ID as PLV5_PROC_TYPE_ID\\n               From (\\n                    Select\\n                         B.PROC_ID,\\n                         B.PROC_TYPE_ID,\\n                         B.PLV0_PROC_ID,\\n                         B.PLV0_PROC_TYPE_ID,\\n                         B.PLV1_PROC_ID,\\n                         B.PLV1_PROC_TYPE_ID,\\n                         B.PLV2_PROC_ID,\\n                         B.PLV2_PROC_TYPE_ID,\\n                         B.PLV3_PROC_ID,\\n                         B.PLV3_PROC_TYPE_ID,\\n                         B.PLV4_PROC_ID,\\n                         P.PROC_TYPE_ID as PLV4_PROC_TYPE_ID,\\n                         P.PARENT_PROC_ID as PLV5_PROC_ID\\n                    From (\\n                         Select\\n                              B.PROC_ID,\\n                              B.PROC_TYPE_ID,\\n                              B.PLV0_PROC_ID,\\n                              B.PLV0_PROC_TYPE_ID,\\n                              B.PLV1_PROC_ID,\\n                              B.PLV1_PROC_TYPE_ID,\\n                              B.PLV2_PROC_ID,\\n                              B.PLV2_PROC_TYPE_ID,\\n                              B.PLV3_PROC_ID,\\n                              P.PROC_TYPE_ID as PLV3_PROC_TYPE_ID,\\n                              P.PARENT_PROC_ID as PLV4_PROC_ID\\n                         From (\\n                              Select\\n                                   B.PROC_ID,\\n                                   B.PROC_TYPE_ID,\\n                                   B.PLV0_PROC_ID,\\n                                   B.PLV0_PROC_TYPE_ID,\\n                                   B.PLV1_PROC_ID,\\n                                   B.PLV1_PROC_TYPE_ID,\\n                                   B.PLV2_PROC_ID,\\n                                   P.PROC_TYPE_ID as PLV2_PROC_TYPE_ID,\\n                                   P.PARENT_PROC_ID as PLV3_PROC_ID\\n                              From (\\n                                   Select\\n                                        B.PROC_ID,\\n                                        B.PROC_TYPE_ID,\\n                                        B.PLV0_PROC_ID,\\n                                        B.PLV0_PROC_TYPE_ID,\\n                                        B.PLV1_PROC_ID,\\n                                        P.PROC_TYPE_ID as PLV1_PROC_TYPE_ID,\\n                                        P.PARENT_PROC_ID as PLV2_PROC_ID\\n                                   From (\\n                                        Select\\n                                             B.PROC_ID,\\n                                             B.PROC_TYPE_ID,\\n                                             B.PLV0_PROC_ID,\\n                                             P.PROC_TYPE_ID as PLV0_PROC_TYPE_ID,\\n                                             P.PARENT_PROC_ID as PLV1_PROC_ID\\n                                        From (\\n                                             Select\\n                                                  PCR.PROC_ID,\\n                                                  P.PROC_TYPE_ID,\\n                                                  P.PARENT_PROC_ID as PLV0_PROC_ID\\n                                             From\\n                                                  APPFUN.PCR PCR\\n                                                  inner join\\n                                                  PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n                                                  on PCR.PROC_ID = TGR.PROC_ID\\n                                                  inner join\\n                                                  APPFUN.PROC P\\n                                                  on PCR.PROC_ID = P.PROC_ID\\n                                        ) B\\n                                        left join\\n                                        APPFUN.PROC P\\n                                        on B.PLV0_PROC_ID = P.PROC_ID\\n                                   ) B\\n                                   left join\\n                                   APPFUN.PROC P\\n                                   on B.PLV1_PROC_ID = P.PROC_ID\\n                              ) B\\n                              left join\\n                              APPFUN.PROC P\\n                              on B.PLV2_PROC_ID = P.PROC_ID\\n                         ) B\\n                         left join\\n                         APPFUN.PROC P\\n                         on B.PLV3_PROC_ID = P.PROC_ID\\n                    ) B\\n                    left join\\n                    APPFUN.PROC P\\n                    on B.PLV4_PROC_ID = P.PROC_ID\\n               ) B\\n               left join\\n               APPFUN.PROC P\\n               on B.PLV5_PROC_ID = P.PROC_ID \\n          ) S\\n     ) PCR_FLAGS\\n     on C.PROC_ID = PCR_FLAGS.PROC_ID\\n     left join (\\n          Select\\n               PCR.PROC_ID,\\n               GEO.GEO_DIM_UID,\\n               PCR.ORIGINATING_ORG,\\n               PCR.PRICER\\n          From\\n               APPFUN.PCR PCR\\n               inner join\\n               APPFUN.PROC P\\n               on PCR.PROC_ID = P.PROC_ID\\n               left outer join\\n               PGMPDM.GEO_DIM GEO\\n               on PCR.CNTRY=GEO.SRGN_CD\\n     ) S\\n     on C.PROC_ID = S.PROC_ID\\n     left join\\n     PGMPDM.ZAUX_WIN_LOSS WLZ\\n     on C.PROC_ID = WLZ.PROC_DIM_UID\\n     left join (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          From\\n               PGMPDM.ZAUX_ETL_JOBS\\n          Where\\n               ETL_JOB_NM = \\'BALD0330_PCR_CRC_DIM\\'\\n     ) JOB\\n     on 1 = 1\\n     left join (\\n          Select\\n               ETL_EXCTN_ID,\\n               ETL_PARAM_START_TMS,\\n               ETL_PARAM_END_TMS\\n          From\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          Where\\n               IS_CURR_IND = \\'Y\\'\\n     ) FIL\\n     on 1 = 1\\n     left join (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          From\\n               PGMPDM.SRC_SYS_DIM\\n          Where\\n               SRC_SYS_CD = \\'PGMP\\'\\n     ) SYS\\n     on 1 = 1\\n     left join (\\n          Select\\n               MIS_REP_REF_UID,\\n               MIS_REP_REF_CD\\n          From\\n               PGMPDM.MISC_REP_REF               \\n     ) PWD\\n     on PWD.MIS_REP_REF_UID = 3',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          LKP_PRICE_TYPE_CD as string,",
				"          LKP_PRICE_TYPE_DESC as string,",
				"          LKP_ETL_JOB_ID as integer,",
				"          LKP_SRC_SYS_DIM_UID as integer,",
				"          LKP_HASHED_VAL as binary",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     PRICE_TYPE_CD as LKP_PRICE_TYPE_CD,\\n     PRICE_TYPE_DESC as LKP_PRICE_TYPE_DESC,\\n     ETL_JOB_ID as LKP_ETL_JOB_ID,\\n     SRC_SYS_DIM_UID as LKP_SRC_SYS_DIM_UID,\\n     HashBytes(\\'SHA2_256\\', \\n          coalesce(cast(PRICE_TYPE_CD as varchar), \\'\\') +\\n          coalesce(cast(PRICE_TYPE_DESC as varchar), \\'\\') + \\n          coalesce(cast(ETL_JOB_ID as varchar), \\'\\') + \\n          coalesce(cast(SRC_SYS_DIM_UID as varchar), \\'\\') \\n     ) as LKP_HASHED_VAL\\nFrom\\n     PGMPDM.PRICE_TYPE_CD_DIM',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"getLookupData sort(asc(LKP_PRICE_TYPE_CD, false)) ~> sortedLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"dropUnchangedRows split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"getSourceData, sortedLookupData join(PRICE_TYPE_CD == LKP_PRICE_TYPE_CD,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          PRICE_TYPE_CD_DIM_UID,",
				"          PRICE_TYPE_CD,",
				"          PRICE_TYPE_DESC,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(PRICE_TYPE_CD_DIM_UID = MAX_ID + ROW_NUM,",
				"          DM_CRETD_USER_ID = $current_user,",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          PRICE_TYPE_CD,",
				"          PRICE_TYPE_DESC,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"mergedData derive(ROW_STATUS = case(PRICE_TYPE_CD == toString(null()) && LKP_PRICE_TYPE_CD != toString(null()), 'D', case(PRICE_TYPE_CD != toString(null()) && LKP_PRICE_TYPE_CD == toString(null()), 'I', case(HASHED_VAL == LKP_HASHED_VAL, 'L', 'U')))) ~> CDCval",
				"CDCval filter(ROW_STATUS != 'L') ~> dropUnchangedRows",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'PRICE_TYPE_CD_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['PRICE_TYPE_CD'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'PRICE_TYPE_CD_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}