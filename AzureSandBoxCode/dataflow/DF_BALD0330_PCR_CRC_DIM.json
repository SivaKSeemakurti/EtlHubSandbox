{
	"name": "DF_BALD0330_PCR_CRC_DIM",
	"properties": {
		"description": "Job Creation: 14-07-2022\nJob Name: DF_BALD0330_PCR_CRC_DIM\nCreated By: Subramanian R",
		"folder": {
			"name": "PGMP/Dimension"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourcePCRData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceCRCData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "clientProposalRqstDate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "clientRevisedProposalRqstDate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "proposalSentToClientDate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "clientRqstImplementCompletionDate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "clientRevisedRqstImplementCompletionDate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "implementationReadyForCADate"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				},
				{
					"name": "dropUnchangedRows"
				},
				{
					"name": "renamedColumns"
				},
				{
					"name": "sortedLookupData"
				},
				{
					"name": "sourcePCRCRCData"
				},
				{
					"name": "joinCPRD"
				},
				{
					"name": "joinCRPRD"
				},
				{
					"name": "joinPSTCD"
				},
				{
					"name": "joinCRICD"
				},
				{
					"name": "joinCRRICD"
				},
				{
					"name": "joinIRFCAD"
				},
				{
					"name": "dropUnwantedKeyColumns"
				},
				{
					"name": "hashColumn"
				},
				{
					"name": "lookupHashColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     current_user as string,",
				"     hash_columns as string ('PCR_CRC_DIM_UID, PRPSL_PRICE_TERM_DIM_UID, CMPLXTY_DIM_UID, RQST_STAT_DIM_UID, RQST_TYPE_DIM_UID, RQST_RCVD_DT, PRPSL_RQST_DT, CLNT_RVSD_PRPSL_RQSTD_DT, PRPSL_SENT_TO_CLNT_DT, PRPSL_SENT_TO_CLNT_DT_WD, PRPSL_ACCPTD_DT, PRPSL_ACCPTD_DT_WD, PRPSL_REJCT_DT, RQST_IMPLMNT_CMPLTD_DT, CLNT_RVSD_RQST_IMPL_CMPL_DT, IMPLMNT_READY_CUST_ACCEPT_DT, IMPLMNT_READY_CUST_ACCEPT_DT_WD, PRPSL_EXP_DT, PRPSL_DSPSN_DT_WD, ON_HOLD_DT, WITHDRWN_DT, DELD_DT, LATEST_PRPSL_RQSTD_DT, LATEST_IMPLMNT_RQSTD_DT, PRPSL_OR_REJCT_DT, MERGED_DT, CLNT_ACCNTG_CD, CLNT_CNTCT_NM, CLNT_AFFCT_AREA_TXT, AGRMT_REF_DTL_TXT, SRVC_TYPE_TXT, CLNT_APPRVL_NUM, RFS_GROUP_NM, SRVC_PRVDR_ORGNZN_TXT, PREDEFND_SRVCS_DESC, SIEBEL_OPPRTNTY_NUM, BTT_NUM, SLTN_OWNR_TXT, DLVR_CRDNTR_TXT, SLTN_DSGNR_TXT, CLAIM_ACCNT_CD, CLAIM_WORK_ITEM_CD, RSRC_SUMRY_PRSNL_INVOLV_IND, RSRC_SUMRY_SERVER_COM_IND, RSRC_SUMRY_STRG_COM_IND, RSRC_SUMRY_HW_COM_IND, RSRC_SUMRY_SOFTWR_COM_IND, RJCT_RSN_CD, RJCT_SRC_CD, RJCT_EXPLNN_TXT, PRICE_TYPE_CD, RSN_CD, PURCHS_ORDR_NM, UNSLCTD_RQST_IND, CNTRCT_CHNG_RQRD_IND, OATS_RCD_RRQRD_IND, NON_STD_T_AND_C_IND, TRVL_INVC_IND, TERMNTN_CHRGS_IND, RNWL_MNTH_CD, BYPSS_SLTN_DSGN_IND, PRPSL_OWNR_TXT, ETL_JOB_ID, SRC_SYS_DIM_UID, HAS_PRNT_RFS_IND, PRNT_PROC_DIM_UID, PRJCT_DIM_UID, L30_OFFRNG_ID_1,  L30_OFFRNG_ID_2,  L30_OFFRNG_ID_3, CLNT_PRPSL_RQSTD_FIRST_TM_DT,  CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT,  PRPSL_SENT_TO_CLNT_FIRST_TM_DT,  CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,  CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,  IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT, GEO_DIM_UID, ORGNTG_ORG, PRICER_NM, SOLTN_TEAM, ERO_CHCKD_DT,  EA_CHCKD_DT, CE_CHCKD_DT, EXPORT_REG, ENVMNTL_AFF, CMPLNCE_ENGG, GROSS_TCP_CTRY_CD, GROSS_TCP_GEO_DIM_UID')",
				"}",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          PRPSL_PRICE_TERM_DIM_UID as integer,",
				"          CMPLXTY_DIM_UID as integer,",
				"          RQST_STAT_DIM_UID as integer,",
				"          RQST_TYPE_DIM_UID as integer,",
				"          RQST_RCVD_DT as date,",
				"          PRPSL_RQST_DT as date,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT_WD as date,",
				"          PRPSL_ACCPTD_DT as date,",
				"          PRPSL_ACCPTD_DT_WD as date,",
				"          PRPSL_REJCT_DT as date,",
				"          RQST_IMPLMNT_CMPLTD_DT as date,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD as date,",
				"          PRPSL_EXP_DT as date,",
				"          PRPSL_DSPSN_DT_WD as date,",
				"          ON_HOLD_DT as date,",
				"          WITHDRWN_DT as date,",
				"          DELD_DT as date,",
				"          LATEST_PRPSL_RQSTD_DT as date,",
				"          LATEST_IMPLMNT_RQSTD_DT as date,",
				"          PRPSL_OR_REJCT_DT as date,",
				"          MERGED_DT as date,",
				"          CLNT_ACCNTG_CD as string,",
				"          CLIENT_CNTCT_NAME as string,",
				"          CLNT_AFFCT_AREA_TXT as string,",
				"          AGRMT_REF_DTL_TXT as string,",
				"          SRVC_TYPE_TXT as string,",
				"          CLNT_APPRVL_NUM as integer,",
				"          RFS_GROUP_NM as string,",
				"          SRVC_PRVDR_ORGNZN_TXT as string,",
				"          PREDEFND_SRVCS_DESC as string,",
				"          SIEBEL_OPPRTNTY_NUM as string,",
				"          BTT_NUM as integer,",
				"          SOLTN_OWNER as string,",
				"          DLVR_COORDTR as string,",
				"          SOLTN_DESIGNER as string,",
				"          CLAIM_ACCNT_CD as string,",
				"          CLAIM_WORK_ITEM_CD as string,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND as string,",
				"          RSRC_SUMRY_SERVER_COM_IND as string,",
				"          RSRC_SUMRY_STRG_COM_IND as string,",
				"          RSRC_SUMRY_HW_COM_IND as string,",
				"          RSRC_SUMRY_SOFTWR_COM_IND as string,",
				"          RJCT_RSN_CD as string,",
				"          RJCT_SRC_CD as string,",
				"          RJCT_EXPLNN_TXT as string,",
				"          PRICE_TYPE_CD as string,",
				"          RSN_CD as string,",
				"          PURCHS_ORDR_NM as string,",
				"          UNSLCTD_RQST_IND as string,",
				"          CNTRCT_CHNG_RQRD_IND as string,",
				"          OATS_RCD_RRQRD_IND as string,",
				"          NON_STD_T_AND_C_IND as string,",
				"          TRVL_INVC_IND as string,",
				"          TERMNTN_CHRGS_IND as string,",
				"          RNWL_MNTH_CD as string,",
				"          BYPSS_SLTN_DSGN_IND as string,",
				"          PRPSL_OWNER as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          IS_DELETED as integer,",
				"          HAS_PRNT_RFS_IND as string,",
				"          PRNT_PROC_DIM_UID as integer,",
				"          PRJCT_DIM_UID as integer,",
				"          L30_OFFRNG_ID_1 as string,",
				"          L30_OFFRNG_ID_2 as string,",
				"          L30_OFFRNG_ID_3 as string,",
				"          GEO_DIM_UID as integer,",
				"          ORGNTG_ORG as string,",
				"          PRICER_NM as string,",
				"          SOLTN_TEAM as string,",
				"          ERO_CHCKD_DT as date,",
				"          EA_CHCKD_DT as date,",
				"          CE_CHCKD_DT as date,",
				"          EXPORT_REG as string,",
				"          ENVMNTL_AFF as string,",
				"          CMPLNCE_ENGG as string,",
				"          GROSS_TCP_CTRY_CD as string,",
				"          GROSS_TCP_GEO_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     C.PROC_ID as PCR_CRC_DIM_UID,\\n     coalesce(PPT.PRPSL_PRICE_TERM_DIM_UID, -1) as PRPSL_PRICE_TERM_DIM_UID,\\n     coalesce(C.COMPLEXITY, -1) as CMPLXTY_DIM_UID,\\n     coalesce(RSTD.RQST_STAT_DIM_UID, -1) as RQST_STAT_DIM_UID,\\n     coalesce(RT.RQST_TYPE_DIM_UID, -1) as RQST_TYPE_DIM_UID,\\n     C.RQST_RECEIV_DATE as RQST_RCVD_DT,\\n     C.PRPSL_RQST_DATE as PRPSL_RQST_DT,\\n     C.CLIENT_REVISD_PRPSL_RQSTD_DT as CLNT_RVSD_PRPSL_RQSTD_DT,\\n     C.PRPSL_SENT_TO_CLIENT_DATE as PRPSL_SENT_TO_CLNT_DT,\\n     TGR.PRPSL_SENT_TO_CLNT_DT as PRPSL_SENT_TO_CLNT_DT_WD,\\n     C.PRPSL_ACCEPTED_DATE as PRPSL_ACCPTD_DT,\\n     TGR.PRPSL_ACCPTD_DT as PRPSL_ACCPTD_DT_WD,\\n     C.PRPSL_REJCT_DATE as PRPSL_REJCT_DT,\\n     C.RQST_IMPLMNT_COMPLT_DATE as RQST_IMPLMNT_CMPLTD_DT,\\n     C.CLIENT_RVSD_RQST_IMPL_CMPL_DT as CLNT_RVSD_RQST_IMPL_CMPL_DT,\\n     R.IMPLMNT_RDY_CUST_ACCEPT_DT as IMPLMNT_READY_CUST_ACCEPT_DT,\\n     TGR.IMPLMTN_READY_DT as IMPLMNT_READY_CUST_ACCEPT_DT_WD,\\n     C.PRPSL_EXP_DATE as PRPSL_EXP_DT,\\n     TGR.PRPSL_DSPSN_DT as PRPSL_DSPSN_DT_WD,\\n     P.ON_HOLD_DATE as ON_HOLD_DT,\\n     P.WITHDRAWN_DATE as WITHDRWN_DT,\\n     P.DELETED_DATE as DELD_DT,\\n     coalesce(R.CLIENT_REVISD_PRPSL_RQSTD_DT, R.PRPSL_RQST_DATE) as LATEST_PRPSL_RQSTD_DT,\\n     coalesce(R.CLIENT_RVSD_RQST_IMPL_CMPL_DT, R.RQST_IMPLMNT_COMPLT_DATE) as LATEST_IMPLMNT_RQSTD_DT,\\n     case\\n          when (TGR.PRPSL_ACCPTD_DT is null and R.PRPSL_REJCT_DATE is not null) then R.PRPSL_REJCT_DATE\\n          when (TGR.PRPSL_ACCPTD_DT is not null and R.PRPSL_REJCT_DATE is null) then TGR.PRPSL_ACCPTD_DT\\n          when (TGR.PRPSL_ACCPTD_DT < R.PRPSL_REJCT_DATE) then TGR.PRPSL_ACCPTD_DT\\n          else R.PRPSL_REJCT_DATE\\n     end as PRPSL_OR_REJCT_DT,\\n     case\\n          when WLZ.WINLOSS_CD =\\'WIN\\' then C.PRPSL_ACCEPTED_DATE\\n          when WLZ.WINLOSS_CD =\\'LOSS\\' then\\n               case\\n               when R.PRPSL_REJCT_DATE is null then P.WITHDRAWN_DATE\\n               else R.PRPSL_REJCT_DATE\\n               end\\n          when WLZ.WINLOSS_CD =\\'UNK\\' then NULL\\n     end as MERGED_DT,\\n     C.CLIENT_ACCNTG_CD as CLNT_ACCNTG_CD,\\n     C.CLIENT_CNTCT_NAME, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.CLIENT_CNTCT_NAME, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as CLNT_CNTCT_NM,\\n     C.CLIENT_AFFECT_AREA as CLNT_AFFCT_AREA_TXT,\\n     C.AGREEMENT_REF_DETAILS as AGRMT_REF_DTL_TXT,\\n     C.SRVC_TYPE as SRVC_TYPE_TXT,\\n     C.CLIENT_APPRV as CLNT_APPRVL_NUM,\\n     C.RFS_GROUP_NAME as RFS_GROUP_NM,\\n     C.SRVC_PRVDR_ORG as SRVC_PRVDR_ORGNZN_TXT,\\n     cast(C.PREDEFINED_SRVCS_DESCR as varchar(4096)) as PREDEFND_SRVCS_DESC,\\n     C.SIEBEL_OPPORTUNITY_NUMBER as SIEBEL_OPPRTNTY_NUM,\\n     C.BTT as BTT_NUM,\\n     C.SOLTN_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.SOLTN_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_OWNR_TXT,\\n     C.DLVR_COORDTR, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.DLVR_COORDTR, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as DLVR_CRDNTR_TXT,\\n     C.SOLTN_DESIGNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.SOLTN_DESIGNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_DSGNR_TXT,\\n     C.CLAIM_ACCNT_CD as CLAIM_ACCNT_CD,\\n     cast(C.CLAIM_WORK_ITEM_CDS as varchar(50)) as CLAIM_WORK_ITEM_CD,\\n     C.RESRC_SUMRY_PERSNL_INVOLV_IND as RSRC_SUMRY_PRSNL_INVOLV_IND,\\n     C.RESRC_SUMRY_SERVER_COM_IND as RSRC_SUMRY_SERVER_COM_IND,\\n     C.RESRC_SUMRY_STORAGE_COM_IND as RSRC_SUMRY_STRG_COM_IND,\\n     C.RESRC_SUMRY_HARDWARE_COM_IND as RSRC_SUMRY_HW_COM_IND,\\n     C.RESRC_SUMRY_SFTWR_COM_IND as RSRC_SUMRY_SOFTWR_COM_IND,\\n     C.REJECT_REASON_CD as RJCT_RSN_CD,\\n     C.REJECT_SRC_CD as RJCT_SRC_CD,\\n     C.REJECT_EXPLNTN as RJCT_EXPLNN_TXT,\\n     C.PRICE_TYPE_CDS as PRICE_TYPE_CD,\\n     C.REASON_CDS as RSN_CD,\\n     C.PURCHS_ORDR_NM as PURCHS_ORDR_NM,\\n     C.UNSOLICITED_RQST_IND as UNSLCTD_RQST_IND,\\n     C.CNTRCT_CHNG_REQD_IND as CNTRCT_CHNG_RQRD_IND,\\n     C.OATS_RCD_REQD_IND as OATS_RCD_RRQRD_IND,\\n     C.NON_STD_T_AND_C_IND as NON_STD_T_AND_C_IND,\\n     C.TRAVEL_INVOICED_IND as TRVL_INVC_IND,\\n     C.TERMINATN_CHRGS_IND as TERMNTN_CHRGS_IND,\\n     C.RENEWAL_MNTH as RNWL_MNTH_CD,\\n     C.BYPASS_SOLN_DSGN_IND as BYPSS_SLTN_DSGN_IND,\\n     C.PRPSL_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.PRPSL_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as PRPSL_OWNR_TXT,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n     case when D.PROC_ID is null then 0 else 1 end as IS_DELETED,\\n     cast(PCR_FLAGS.HAS_PRNT_RFS_IND as char(1)) as HAS_PRNT_RFS_IND,\\n     PCR_FLAGS.PRNT_PROC_DIM_UID,\\n     PCR_FLAGS.PRJCT_DIM_UID,\\n     C.L30_OFFRNG_1_CD as L30_OFFRNG_ID_1,\\n     C.L30_OFFRNG_2_CD as L30_OFFRNG_ID_2,\\n     C.L30_OFFRNG_3_CD as L30_OFFRNG_ID_3,\\n     S.GEO_DIM_UID,\\n     S.ORIGINATING_ORG AS ORGNTG_ORG,\\n     S.PRICER AS PRICER_NM, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(S.PRICER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as PRICER_NM,\\n     C.SOLTN_TEAM,\\n     C.ERO_CHECKED AS ERO_CHCKD_DT, \\n     C.EA_CHECKED as EA_CHCKD_DT,\\n     C.CE_CHECKED as CE_CHCKD_DT,\\n     C.EXPORT_REGULATION as EXPORT_REG,\\n     C.ENVIORMENTAL_AFFAIRS AS ENVMNTL_AFF,\\n     C.COMPLIANCE_ENGG AS CMPLNCE_ENGG,\\n     CAST(C.CNTRY AS CHAR(2)) AS GROSS_TCP_CTRY_CD,\\n     GEO.GEO_DIM_UID AS GROSS_TCP_GEO_DIM_UID\\nFrom\\n     APPFUN.PCR C\\n     inner join\\n     PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n     on C.PROC_ID = TGR.PROC_ID\\n     inner join\\n     APPFUN.\"PROC\" P\\n     on C.PROC_ID = P.PROC_ID\\n     left join\\n     APPFUN.RQST R\\n     on C.PROC_ID = R.PROC_ID\\n     left join\\n     PGMPDM.RQST_TYPE_DIM RT\\n     -- As the Catalog Only records were defined at the PROC level, an exception should be made to\\n     -- ensure that this category is taken into consideration\\n     on case when P.PROC_TYPE_ID = \\'CTLGONLY\\' then \\'C\\' else C.RQST_TYPE end = RT.RQST_TYPE_DIM_CD\\n     left join\\n     PGMPDM.ZAUX_DELD_PROC_ID D\\n     on C.PROC_ID = D.PROC_ID\\n     left join\\n     PGMPDM.PRPSL_PRICE_TERM_DIM PPT\\n     on R.PRPSL_PRICING_TERMS = PPT.PRPSL_PRICE_TERM_DIM_CD\\n     left join (\\n          Select\\n               P.PROC_ID,\\n               P.STATE,\\n               R.PRPSL_REJCT_DATE,\\n               WSD.WKFLW_STEP_SEQ,\\n               case\\n                    when (P.STATE in (\\'A\\', \\'C\\') and WSD.WKFLW_STEP_SEQ between 1160 and 1250) then \\'WON\\'\\n                    when ((P.STATE = \\'W\\' and WSD.WKFLW_STEP_SEQ between 1135 and 1150) or (P.STATE in (\\'C\\', \\'Q\\', \\'R\\') and R.PRPSL_REJCT_DATE is not null)) then \\'LOST\\'\\n                    when (WSD.WKFLW_STEP_SEQ between 1135 and 1145) then \\'WIP-CR\\'\\n                    when ((WSD.WKFLW_STEP_SEQ between 1010 and 1131) or WSD.WKFLW_STEP_SEQ = 1150) then \\'WIP-NWC\\'\\n                    else \\'UNK\\'\\n               end as PROC_STATUS\\n          From\\n               PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n               inner join\\n               APPFUN.\"PROC\" P\\n               on TGR.PROC_ID = P.PROC_ID\\n               inner join\\n               APPFUN.PCR R\\n               on P.PROC_ID = R.PROC_ID\\n               inner join\\n               APPFUN.PROC_STEP_DATA PSD\\n               on\\n                    P.PROC_ID = PSD.PROC_ID and\\n                    P.CUR_PROC_STEP_DATA_ID = PSD.PROC_STEP_DATA_ID\\n               inner join\\n               APPFUN.WKFLW_STEP_DEF WSD\\n               on\\n                    PSD.WKFLW_STEP_DEF_ID = WSD.WKFLW_STEP_DEF_ID and\\n                    PSD.WKFLW_DEF_ID = WSD.WKFLW_DEF_ID\\n     ) RST\\n     on P.PROC_ID = RST.PROC_ID\\n     left join\\n     PGMPDM.RQST_STAT_DIM RSTD\\n     on RST.PROC_STATUS = RSTD.RQST_STAT_DIM_CD\\n     left join \\n     PGMPDM.GEO_DIM GEO\\n     on C.CNTRY = GEO.SRGN_CD\\n     left join (\\n          Select\\n               S.PROC_ID,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV1_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then \\'Y\\'\\n                    when S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then \\'Y\\'\\n                    else \\'N\\'\\n               end as HAS_PRNT_RFS_IND,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV1_PROC_ID = 0 then S.PLV0_PROC_ID\\n                    when S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then S.PLV1_PROC_ID\\n                    when S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then S.PLV2_PROC_ID\\n                    when S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then S.PLV3_PROC_ID\\n                    when S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then S.PLV4_PROC_ID\\n                    when S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then S.PLV5_PROC_ID\\n                    else -1\\n               end as PRNT_PROC_DIM_UID,\\n               case\\n                    when S.PLV0_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV1_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV2_PROC_ID = 0 then S.PLV0_PROC_ID\\n                    when S.PLV1_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV2_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV3_PROC_ID = 0 then S.PLV1_PROC_ID\\n                    when S.PLV2_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV3_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV4_PROC_ID = 0 then S.PLV2_PROC_ID\\n                    when S.PLV3_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV4_PROC_TYPE_ID = \\'REQUEST\\' and S.PLV5_PROC_ID = 0 then S.PLV3_PROC_ID\\n                    when S.PLV4_PROC_TYPE_ID = \\'PROJECT\\' and S.PLV5_PROC_TYPE_ID = \\'REQUEST\\' then S.PLV4_PROC_ID\\n                    -- There is not need to level 5, since it won\\'t have a valid parent\\n                    else -1\\n               end as PRJCT_DIM_UID\\n          From (\\n               Select\\n                    B.PROC_ID,\\n                    B.PROC_TYPE_ID,\\n                    coalesce(B.PLV0_PROC_ID, 0) as PLV0_PROC_ID,\\n                    B.PLV0_PROC_TYPE_ID,\\n                    coalesce(B.PLV1_PROC_ID, 0) as PLV1_PROC_ID,\\n                    B.PLV1_PROC_TYPE_ID,\\n                    coalesce(B.PLV2_PROC_ID, 0) as PLV2_PROC_ID,\\n                    B.PLV2_PROC_TYPE_ID,\\n                    coalesce(B.PLV3_PROC_ID, 0) as PLV3_PROC_ID,\\n                    B.PLV3_PROC_TYPE_ID,\\n                    coalesce(B.PLV4_PROC_ID, 0) as PLV4_PROC_ID,\\n                    B.PLV4_PROC_TYPE_ID,\\n                    coalesce(B.PLV5_PROC_ID, 0) as PLV5_PROC_ID,\\n                    P.PROC_TYPE_ID as PLV5_PROC_TYPE_ID\\n               From (\\n                    Select\\n                         B.PROC_ID,\\n                         B.PROC_TYPE_ID,\\n                         B.PLV0_PROC_ID,\\n                         B.PLV0_PROC_TYPE_ID,\\n                         B.PLV1_PROC_ID,\\n                         B.PLV1_PROC_TYPE_ID,\\n                         B.PLV2_PROC_ID,\\n                         B.PLV2_PROC_TYPE_ID,\\n                         B.PLV3_PROC_ID,\\n                         B.PLV3_PROC_TYPE_ID,\\n                         B.PLV4_PROC_ID,\\n                         P.PROC_TYPE_ID as PLV4_PROC_TYPE_ID,\\n                         P.PARENT_PROC_ID as PLV5_PROC_ID\\n                    From (\\n                         Select\\n                              B.PROC_ID,\\n                              B.PROC_TYPE_ID,\\n                              B.PLV0_PROC_ID,\\n                              B.PLV0_PROC_TYPE_ID,\\n                              B.PLV1_PROC_ID,\\n                              B.PLV1_PROC_TYPE_ID,\\n                              B.PLV2_PROC_ID,\\n                              B.PLV2_PROC_TYPE_ID,\\n                              B.PLV3_PROC_ID,\\n                              P.PROC_TYPE_ID as PLV3_PROC_TYPE_ID,\\n                              P.PARENT_PROC_ID as PLV4_PROC_ID\\n                         From (\\n                              Select\\n                                   B.PROC_ID,\\n                                   B.PROC_TYPE_ID,\\n                                   B.PLV0_PROC_ID,\\n                                   B.PLV0_PROC_TYPE_ID,\\n                                   B.PLV1_PROC_ID,\\n                                   B.PLV1_PROC_TYPE_ID,\\n                                   B.PLV2_PROC_ID,\\n                                   P.PROC_TYPE_ID as PLV2_PROC_TYPE_ID,\\n                                   P.PARENT_PROC_ID as PLV3_PROC_ID\\n                              From (\\n                                   Select\\n                                        B.PROC_ID,\\n                                        B.PROC_TYPE_ID,\\n                                        B.PLV0_PROC_ID,\\n                                        B.PLV0_PROC_TYPE_ID,\\n                                        B.PLV1_PROC_ID,\\n                                        P.PROC_TYPE_ID as PLV1_PROC_TYPE_ID,\\n                                        P.PARENT_PROC_ID as PLV2_PROC_ID\\n                                   From (\\n                                        Select\\n                                             B.PROC_ID,\\n                                             B.PROC_TYPE_ID,\\n                                             B.PLV0_PROC_ID,\\n                                             P.PROC_TYPE_ID as PLV0_PROC_TYPE_ID,\\n                                             P.PARENT_PROC_ID as PLV1_PROC_ID\\n                                        From (\\n                                             Select\\n                                                  PCR.PROC_ID,\\n                                                  P.PROC_TYPE_ID,\\n                                                  P.PARENT_PROC_ID as PLV0_PROC_ID\\n                                             From\\n                                                  APPFUN.PCR PCR\\n                                                  inner join\\n                                                  PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n                                                  on PCR.PROC_ID = TGR.PROC_ID\\n                                                  inner join\\n                                                  APPFUN.\"PROC\" P\\n                                                  on PCR.PROC_ID = P.PROC_ID\\n                                        ) B\\n                                        left join\\n                                        APPFUN.\"PROC\" P\\n                                        on B.PLV0_PROC_ID = P.PROC_ID\\n                                   ) B\\n                                   left join\\n                                   APPFUN.\"PROC\" P\\n                                   on B.PLV1_PROC_ID = P.PROC_ID\\n                              ) B\\n                              left join\\n                              APPFUN.\"PROC\" P\\n                              on B.PLV2_PROC_ID = P.PROC_ID\\n                         ) B\\n                         left join\\n                         APPFUN.\"PROC\" P\\n                         on B.PLV3_PROC_ID = P.PROC_ID\\n                    ) B\\n                    left join\\n                    APPFUN.\"PROC\" P\\n                    on B.PLV4_PROC_ID = P.PROC_ID\\n               ) B\\n               left join\\n               APPFUN.\"PROC\" P\\n               on B.PLV5_PROC_ID = P.PROC_ID \\n          ) S\\n     ) PCR_FLAGS\\n     on C.PROC_ID = PCR_FLAGS.PROC_ID\\n     left join (\\n          Select\\n               PCR.PROC_ID,\\n               GEO.GEO_DIM_UID,\\n               PCR.ORIGINATING_ORG,\\n               PCR.PRICER\\n          From\\n               APPFUN.PCR PCR\\n               inner join\\n               APPFUN.\"PROC\" P\\n               on PCR.PROC_ID = P.PROC_ID\\n               left outer join\\n               PGMPDM.GEO_DIM GEO\\n               on PCR.CNTRY=GEO.SRGN_CD\\n     ) S\\n     on C.PROC_ID = S.PROC_ID\\n     left join\\n     PGMPDM.ZAUX_WIN_LOSS WLZ\\n     on C.PROC_ID = WLZ.PROC_DIM_UID\\n     left join (\\n          Select\\n            coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n        From\\n            PGMPDM.ZAUX_ETL_JOBS\\n        Where\\n            ETL_JOB_NM = \\'BALD0330_PCR_CRC_DIM\\'\\n    ) JOB\\n    on 1 = 1\\n    left join (\\n        Select\\n            ETL_EXCTN_ID,\\n            ETL_PARAM_START_TMS,\\n            ETL_PARAM_END_TMS\\n        From\\n            PGMPDM.ZAUX_ETL_EXCTN\\n        Where\\n            IS_CURR_IND = \\'Y\\'\\n    ) FIL\\n    on 1 = 1\\n    left join (\\n        Select\\n            coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n        From\\n            PGMPDM.SRC_SYS_DIM\\n        Where\\n            SRC_SYS_CD = \\'PGMP\\'\\n    ) SYS\\n    on 1 = 1\\n    left join (\\n        Select\\n            MIS_REP_REF_UID,\\n            MIS_REP_REF_CD\\n        From\\n            PGMPDM.MISC_REP_REF               \\n    ) PWD\\n    on PWD.MIS_REP_REF_UID = 3',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourcePCRData",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          PRPSL_PRICE_TERM_DIM_UID as integer,",
				"          CMPLXTY_DIM_UID as integer,",
				"          RQST_STAT_DIM_UID as integer,",
				"          RQST_TYPE_DIM_UID as integer,",
				"          RQST_RCVD_DT as date,",
				"          PRPSL_RQST_DT as date,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT_WD as date,",
				"          PRPSL_ACCPTD_DT as date,",
				"          PRPSL_ACCPTD_DT_WD as date,",
				"          PRPSL_REJCT_DT as date,",
				"          RQST_IMPLMNT_CMPLTD_DT as date,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD as date,",
				"          PRPSL_EXP_DT as date,",
				"          PRPSL_DSPSN_DT_WD as date,",
				"          ON_HOLD_DT as date,",
				"          WITHDRWN_DT as date,",
				"          DELD_DT as date,",
				"          LATEST_PRPSL_RQSTD_DT as date,",
				"          LATEST_IMPLMNT_RQSTD_DT as date,",
				"          PRPSL_OR_REJCT_DT as date,",
				"          MERGED_DT as date,",
				"          CLNT_ACCNTG_CD as string,",
				"          CLIENT_CNTCT_NAME as string,",
				"          CLNT_AFFCT_AREA_TXT as string,",
				"          AGRMT_REF_DTL_TXT as string,",
				"          SRVC_TYPE_TXT as string,",
				"          CLNT_APPRVL_NUM as integer,",
				"          RFS_GROUP_NM as string,",
				"          SRVC_PRVDR_ORGNZN_TXT as string,",
				"          PREDEFND_SRVCS_DESC as string,",
				"          SIEBEL_OPPRTNTY_NUM as string,",
				"          BTT_NUM as integer,",
				"          SOLTN_OWNER as string,",
				"          DLVR_COORDTR as string,",
				"          SOLTN_DESIGNER as string,",
				"          CLAIM_ACCNT_CD as string,",
				"          CLAIM_WORK_ITEM_CD as string,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND as string,",
				"          RSRC_SUMRY_SERVER_COM_IND as string,",
				"          RSRC_SUMRY_STRG_COM_IND as string,",
				"          RSRC_SUMRY_HW_COM_IND as string,",
				"          RSRC_SUMRY_SOFTWR_COM_IND as string,",
				"          RJCT_RSN_CD as string,",
				"          RJCT_SRC_CD as string,",
				"          RJCT_EXPLNN_TXT as string,",
				"          PRICE_TYPE_CD as string,",
				"          RSN_CD as string,",
				"          PURCHS_ORDR_NM as string,",
				"          UNSLCTD_RQST_IND as string,",
				"          CNTRCT_CHNG_RQRD_IND as string,",
				"          OATS_RCD_RRQRD_IND as string,",
				"          NON_STD_T_AND_C_IND as string,",
				"          TRVL_INVC_IND as string,",
				"          TERMNTN_CHRGS_IND as string,",
				"          RNWL_MNTH_CD as string,",
				"          BYPSS_SLTN_DSGN_IND as string,",
				"          PRPSL_OWNER as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          IS_DELETED as integer,",
				"          HAS_PRNT_RFS_IND as string,",
				"          PRNT_PROC_DIM_UID as integer,",
				"          PRJCT_DIM_UID as integer,",
				"          L30_OFFRNG_ID_1 as string,",
				"          L30_OFFRNG_ID_2 as string,",
				"          L30_OFFRNG_ID_3 as string,",
				"          GEO_DIM_UID as integer,",
				"          ORGNTG_ORG as string,",
				"          PRICER_NM as string,",
				"          SOLTN_TEAM as string,",
				"          ERO_CHCKD_DT as date,",
				"          EA_CHCKD_DT as date,",
				"          CE_CHCKD_DT as date,",
				"          EXPORT_REG as string,",
				"          ENVMNTL_AFF as string,",
				"          CMPLNCE_ENGG as string,",
				"          GROSS_TCP_CTRY_CD as string,",
				"          GROSS_TCP_GEO_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     C.PROC_ID as PCR_CRC_DIM_UID,\\n     coalesce(PPT.PRPSL_PRICE_TERM_DIM_UID, -1) as PRPSL_PRICE_TERM_DIM_UID,\\n     coalesce(R.COMPLEXITY, -1) as CMPLXTY_DIM_UID,\\n     coalesce(RSTD.RQST_STAT_DIM_UID, -1) as RQST_STAT_DIM_UID,\\n     coalesce(RT.RQST_TYPE_DIM_UID, -1) as RQST_TYPE_DIM_UID,\\n     R.RQST_RECEIV_DATE as RQST_RCVD_DT,\\n     R.PRPSL_RQST_DATE as PRPSL_RQST_DT,\\n     R.CLIENT_REVISD_PRPSL_RQSTD_DT as CLNT_RVSD_PRPSL_RQSTD_DT,\\n     C.SENT_TO_CLIENT_DATE as PRPSL_SENT_TO_CLNT_DT,\\n     TGR.PRPSL_SENT_TO_CLNT_DT as PRPSL_SENT_TO_CLNT_DT_WD,\\n     R.PRPSL_ACCEPTED_DATE as PRPSL_ACCPTD_DT,\\n     TGR.PRPSL_ACCPTD_DT as PRPSL_ACCPTD_DT_WD,\\n     R.PRPSL_REJCT_DATE as PRPSL_REJCT_DT,\\n     R.RQST_IMPLMNT_COMPLT_DATE as RQST_IMPLMNT_CMPLTD_DT,\\n     R.CLIENT_RVSD_RQST_IMPL_CMPL_DT as CLNT_RVSD_RQST_IMPL_CMPL_DT,\\n     R.IMPLMNT_RDY_CUST_ACCEPT_DT as IMPLMNT_READY_CUST_ACCEPT_DT,\\n     TGR.IMPLMTN_READY_DT as IMPLMNT_READY_CUST_ACCEPT_DT_WD,\\n     R.PRPSL_EXP_DATE as PRPSL_EXP_DT,\\n     TGR.PRPSL_DSPSN_DT as PRPSL_DSPSN_DT_WD,\\n     P.ON_HOLD_DATE as ON_HOLD_DT,\\n     P.WITHDRAWN_DATE as WITHDRWN_DT,\\n     P.DELETED_DATE as DELD_DT,\\n     coalesce(R.CLIENT_REVISD_PRPSL_RQSTD_DT, R.PRPSL_RQST_DATE) as LATEST_PRPSL_RQSTD_DT,\\n     coalesce(R.CLIENT_RVSD_RQST_IMPL_CMPL_DT, R.RQST_IMPLMNT_COMPLT_DATE) as LATEST_IMPLMNT_RQSTD_DT,\\n     case\\n          when (TGR.PRPSL_ACCPTD_DT is null and R.PRPSL_REJCT_DATE is not null) then R.PRPSL_REJCT_DATE\\n          when (TGR.PRPSL_ACCPTD_DT is not null and R.PRPSL_REJCT_DATE is null) then TGR.PRPSL_ACCPTD_DT\\n          when (TGR.PRPSL_ACCPTD_DT < R.PRPSL_REJCT_DATE) then TGR.PRPSL_ACCPTD_DT\\n          else R.PRPSL_REJCT_DATE\\n     end as PRPSL_OR_REJCT_DT,\\n     case\\n          when P.WITHDRAWN_DATE is null then\\n               case\\n               when (TGR.PRPSL_ACCPTD_DT is null and R.PRPSL_REJCT_DATE is not null) then R.PRPSL_REJCT_DATE\\n               when (TGR.PRPSL_ACCPTD_DT is not null and R.PRPSL_REJCT_DATE is null) then TGR.PRPSL_ACCPTD_DT\\n               when (TGR.PRPSL_ACCPTD_DT > R.PRPSL_REJCT_DATE) then TGR.PRPSL_ACCPTD_DT\\n               else R.PRPSL_REJCT_DATE\\n               end\\n          else P.WITHDRAWN_DATE\\n     end as MERGED_DT,\\n     C.CLIENT_ACCNTG_CD as CLNT_ACCNTG_CD,\\n     C.CLIENT_CNTCT_NAME, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(C.CLIENT_CNTCT_NAME, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as CLNT_CNTCT_NM,\\n     R.CLIENT_AFFECT_AREA as CLNT_AFFCT_AREA_TXT,\\n     R.AGREEMENT_REF_DETAILS as AGRMT_REF_DTL_TXT,\\n     R.SRVC_TYPE as SRVC_TYPE_TXT,\\n     R.CLIENT_APPRV as CLNT_APPRVL_NUM,\\n     R.RFS_GROUP_NAME as RFS_GROUP_NM,\\n     R.SRVC_PRVDR_ORG as SRVC_PRVDR_ORGNZN_TXT,\\n     cast(R.PREDEFINED_SRVCS_DESCR as varchar(4096)) as PREDEFND_SRVCS_DESC,\\n     R.SIEBEL_OPPORTUNITY_NUMBER as SIEBEL_OPPRTNTY_NUM,\\n     R.BTT as BTT_NUM,\\n     R.SOLTN_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(R.SOLTN_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_OWNR_TXT,\\n     R.DLVR_COORDTR, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(R.DLVR_COORDTR, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as DLVR_CRDNTR_TXT,\\n     R.SOLTN_DESIGNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(R.SOLTN_DESIGNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as SLTN_DSGNR_TXT,\\n     R.CLAIM_ACCNT_CD as CLAIM_ACCNT_CD,\\n     cast(\\'\\' as varchar(50)) as CLAIM_WORK_ITEM_CD,\\n     R.RESRC_SUMRY_PERSNL_INVOLV_IND as RSRC_SUMRY_PRSNL_INVOLV_IND,\\n     R.RESRC_SUMRY_SERVER_COM_IND as RSRC_SUMRY_SERVER_COM_IND,\\n     R.RESRC_SUMRY_STORAGE_COM_IND as RSRC_SUMRY_STRG_COM_IND,\\n     R.RESRC_SUMRY_HARDWARE_COM_IND as RSRC_SUMRY_HW_COM_IND,\\n     R.RESRC_SUMRY_SFTWR_COM_IND as RSRC_SUMRY_SOFTWR_COM_IND,\\n     R.REJECT_REASON_CD as RJCT_RSN_CD,\\n     R.REJECT_SRC_CD as RJCT_SRC_CD,\\n     R.REJECT_EXPLNTN as RJCT_EXPLNN_TXT,\\n     R.PRICE_TYPE_CDS as PRICE_TYPE_CD,\\n     \\'\\' as RSN_CD,\\n     R.PURCHS_ORDR_NM as PURCHS_ORDR_NM,\\n     R.UNSOLICITED_RQST_IND as UNSLCTD_RQST_IND,\\n     R.CNTRCT_CHNG_REQD_IND as CNTRCT_CHNG_RQRD_IND,\\n     R.OATS_RCD_REQD_IND as OATS_RCD_RRQRD_IND,\\n     R.NON_STD_T_AND_C_IND as NON_STD_T_AND_C_IND,\\n     R.TRAVEL_INVOICED_IND as TRVL_INVC_IND,\\n     R.TERMINATN_CHRGS_IND as TERMNTN_CHRGS_IND,\\n     R.RENEWAL_MNTH as RNWL_MNTH_CD,\\n     R.BYPASS_SOLN_DSGN_IND as BYPSS_SLTN_DSGN_IND,\\n     R.PRPSL_OWNER, --SYSIBM.ENCRYPT(APPFUN.DECRYPTDATA(R.PRPSL_OWNER, PWD.MIS_REP_REF_CD), PWD.MIS_REP_REF_CD) as PRPSL_OWNR_TXT,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID,\\n     case when D.PROC_ID is null then 0 else 1 end as IS_DELETED,\\n     cast(\\'Y\\' as char(1)) as HAS_PRNT_RFS_IND,\\n     P.PARENT_PROC_ID as PRNT_PROC_DIM_UID,\\n     -1 as PRJCT_DIM_UID,\\n     \\'\\' as L30_OFFRNG_ID_1,\\n     \\'\\' as L30_OFFRNG_ID_2,\\n     \\'\\' as L30_OFFRNG_ID_3,\\n     0 as GEO_DIM_UID,\\n     CAST(NULL as varchar) as ORGNTG_ORG,\\n     CAST(NULL as varchar) as PRICER_NM,\\n     R.SOLTN_TEAM,\\n     R.ERO_CHECKED AS ERO_CHCKD_DT, \\n     R.EA_CHECKED as EA_CHCKD_DT,\\n     R.CE_CHECKED as CE_CHCKD_DT,\\n     R.EXPORT_REGULATION as EXPORT_REG,\\n     R.ENVIORMENTAL_AFFAIRS AS ENVMNTL_AFF,\\n     R.COMPLIANCE_ENGG AS CMPLNCE_ENGG,\\n     CAST(R.CNTRY AS CHAR(2)) AS GROSS_TCP_CTRY_CD,\\n     GEO.GEO_DIM_UID AS GROSS_TCP_GEO_DIM_UID\\nFrom\\n     PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n     inner join\\n     APPFUN.CTLG_RQ_CHG C\\n     on TGR.PROC_ID = C.PROC_ID\\n     inner join\\n     APPFUN.\"PROC\" P\\n     on P.PROC_ID = C.PROC_ID\\n     left join\\n     APPFUN.RQST R\\n     on P.PARENT_PROC_ID = R.PROC_ID\\n     left join\\n     PGMPDM.RQST_TYPE_DIM RT\\n     -- As the Catalog Only records were defined at the PROC level, an exception should be made to\\n     -- ensure that this category is taken into consideration\\n     on case when P.PROC_TYPE_ID = \\'CTLGONLY\\' then \\'C\\' else R.RQST_TYPE end = RT.RQST_TYPE_DIM_CD\\n     left join\\n     PGMPDM.ZAUX_DELD_PROC_ID D\\n     on C.PROC_ID = D.PROC_ID\\n     left join\\n     PGMPDM.PRPSL_PRICE_TERM_DIM PPT\\n     on R.PRPSL_PRICING_TERMS = PPT.PRPSL_PRICE_TERM_DIM_CD\\n     left join (\\n          Select\\n               P.PROC_ID,\\n               P.STATE,\\n               R.REJECTED_DATE,\\n               WSD.WKFLW_STEP_SEQ,\\n               case\\n                    when (P.STATE in (\\'A\\', \\'C\\') and WSD.WKFLW_STEP_SEQ between 1160 and 1250) then \\'WON\\'\\n                    when ((P.STATE = \\'W\\' and WSD.WKFLW_STEP_SEQ between 1135 and 1150) or (P.STATE in (\\'C\\', \\'Q\\', \\'R\\') and R.REJECTED_DATE is not null)) then \\'LOST\\'\\n                    when (WSD.WKFLW_STEP_SEQ between 1135 and 1145) then \\'WIP-CR\\'\\n                    when ((WSD.WKFLW_STEP_SEQ between 1010 and 1131) or WSD.WKFLW_STEP_SEQ = 1150) then \\'WIP-NWC\\'\\n                    else \\'UNK\\'\\n               end as PROC_STATUS\\n          From\\n               PGMPDM.ZAUX_DATE_TRIGGERS TGR\\n               inner join\\n               APPFUN.\"PROC\" P\\n               on TGR.PROC_ID = P.PROC_ID\\n               inner join\\n               APPFUN.CTLG_RQ_CHG R\\n               on P.PROC_ID = R.PROC_ID\\n               inner join\\n               APPFUN.PROC_STEP_DATA PSD\\n               on\\n                    P.PROC_ID = PSD.PROC_ID and\\n                    P.CUR_PROC_STEP_DATA_ID = PSD.PROC_STEP_DATA_ID\\n               inner join\\n               APPFUN.WKFLW_STEP_DEF WSD\\n               on\\n                    PSD.WKFLW_STEP_DEF_ID = WSD.WKFLW_STEP_DEF_ID and\\n                    PSD.WKFLW_DEF_ID = WSD.WKFLW_DEF_ID\\n      ) RST\\n     on P.PROC_ID = RST.PROC_ID\\n     left join\\n     PGMPDM.RQST_STAT_DIM RSTD\\n     on RST.PROC_STATUS = RSTD.RQST_STAT_DIM_CD\\n     left join \\n     PGMPDM.GEO_DIM GEO\\n     on R.CNTRY = GEO.SRGN_CD\\n     left join (\\n          Select\\n            coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n        From\\n            PGMPDM.ZAUX_ETL_JOBS\\n        Where\\n            ETL_JOB_NM = \\'BALD0330_PCR_CRC_DIM\\'\\n    ) JOB\\n    on 1 = 1\\n    left join (\\n        Select\\n            ETL_EXCTN_ID,\\n            ETL_PARAM_START_TMS,\\n            ETL_PARAM_END_TMS\\n        From\\n            PGMPDM.ZAUX_ETL_EXCTN\\n        Where\\n            IS_CURR_IND = \\'Y\\'\\n    ) FIL\\n    on 1 = 1\\n    left join (\\n        Select\\n            coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n        From\\n            PGMPDM.SRC_SYS_DIM\\n        Where\\n            SRC_SYS_CD = \\'PGMP\\'\\n    ) SYS\\n    on 1 = 1\\n    left join (\\n        Select\\n            MIS_REP_REF_UID,\\n            MIS_REP_REF_CD\\n        From\\n            PGMPDM.MISC_REP_REF               \\n    ) PWD\\n    on PWD.MIS_REP_REF_UID = 3',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceCRCData",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          CLNT_PRPSL_RQSTD_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select \\n    S.PCR_CRC_DIM_UID,\\n    S.PRPSL_RQST_DATE as CLNT_PRPSL_RQSTD_FIRST_TM_DT\\nFrom\\n    (\\n        Select\\n            H.PROC_ID as PCR_CRC_DIM_UID,\\n            H.PRPSL_RQST_DATE,\\n            ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n        From \\n            APPFUN.PCR_H as H\\n            inner join \\n            PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n            on \\n                H.PROC_ID = TGR.PROC_ID\\n                and H.UPDATED_TS >= TGR.PRPSL_SENT_TO_CLNT_DT\\n        Where \\n            H.PRPSL_RQST_DATE is not Null\\n    ) as S\\nWhere\\n    S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> clientProposalRqstDate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.CLIENT_REVISD_PRPSL_RQSTD_DT as CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT\\nFrom\\n     (\\n          Select\\n               H.PROC_ID as PCR_CRC_DIM_UID,\\n               H.CLIENT_REVISD_PRPSL_RQSTD_DT,\\n               ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n          From\\n               APPFUN.PCR_H as H\\n               inner join\\n               PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n               on \\n                    H.PROC_ID = TGR.PROC_ID\\n                    and H.UPDATED_TS >= TGR.PRPSL_SENT_TO_CLNT_DT\\n          Where\\n               H.CLIENT_REVISD_PRPSL_RQSTD_DT is not null\\n     ) as S\\nWhere\\n     S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> clientRevisedProposalRqstDate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          PRPSL_SENT_TO_CLNT_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.PRPSL_SENT_TO_CLIENT_DATE as PRPSL_SENT_TO_CLNT_FIRST_TM_DT\\nFrom\\n     (\\n          Select\\n               H.PROC_ID as PCR_CRC_DIM_UID,\\n               H.PRPSL_SENT_TO_CLIENT_DATE,\\n               ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n          From\\n               APPFUN.PCR_H as H\\n               inner join\\n               PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n               on H.PROC_ID = TGR.PROC_ID\\n          Where\\n               H.PRPSL_SENT_TO_CLIENT_DATE is not null\\n     ) as S\\nWhere\\n     S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> proposalSentToClientDate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.RQST_IMPLMNT_COMPLT_DATE as CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT\\nFrom\\n     (\\n          Select\\n               H.PROC_ID as PCR_CRC_DIM_UID,\\n               H.RQST_IMPLMNT_COMPLT_DATE,\\n               ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n          From\\n               APPFUN.PCR_H as H\\n               inner join\\n               PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n               on \\n                    H.PROC_ID = TGR.PROC_ID\\n                    and H.UPDATED_TS >= TGR.IMPLMTN_READY_DT\\n          Where\\n               H.RQST_IMPLMNT_COMPLT_DATE is not null\\n     ) as S\\nWhere\\n     S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> clientRqstImplementCompletionDate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.CLIENT_RVSD_RQST_IMPL_CMPL_DT as CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT\\nFrom\\n     (\\n          Select\\n               H.PROC_ID as PCR_CRC_DIM_UID,\\n               H.CLIENT_RVSD_RQST_IMPL_CMPL_DT,\\n               ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n          From\\n               APPFUN.PCR_H as H\\n               inner join\\n               PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n               on\\n                    H.PROC_ID = TGR.PROC_ID\\n                    and H.UPDATED_TS >= TGR.IMPLMTN_READY_DT               \\n          Where\\n               H.CLIENT_RVSD_RQST_IMPL_CMPL_DT is not null\\n     ) as S\\nWhere\\n     S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> clientRevisedRqstImplementCompletionDate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.IMPLMNT_RDY_CUST_ACCEPT_DT as IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT\\nFrom\\n     (\\n          Select\\n               H.PROC_ID as PCR_CRC_DIM_UID,\\n               cast(null as Date) as IMPLMNT_RDY_CUST_ACCEPT_DT,\\n               ROW_NUMBER() over (partition by H.PROC_ID order by H.UPDATED_TS asc) as POS\\n          From\\n               APPFUN.PCR_H as H\\n               inner join\\n               PGMPDM.ZAUX_DATE_TRIGGERS as TGR\\n               on H.PROC_ID = TGR.PROC_ID\\n     ) as S\\nWhere\\n     S.POS = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> implementationReadyForCADate",
				"source(output(",
				"          PCR_CRC_DIM_UID as integer,",
				"          PRPSL_PRICE_TERM_DIM_UID as integer,",
				"          CMPLXTY_DIM_UID as integer,",
				"          RQST_STAT_DIM_UID as integer,",
				"          RQST_TYPE_DIM_UID as integer,",
				"          RQST_RCVD_DT as date,",
				"          PRPSL_RQST_DT as date,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT as date,",
				"          PRPSL_SENT_TO_CLNT_DT_WD as date,",
				"          PRPSL_ACCPTD_DT as date,",
				"          PRPSL_ACCPTD_DT_WD as date,",
				"          PRPSL_REJCT_DT as date,",
				"          RQST_IMPLMNT_CMPLTD_DT as date,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT as date,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD as date,",
				"          PRPSL_EXP_DT as date,",
				"          PRPSL_DSPSN_DT_WD as date,",
				"          ON_HOLD_DT as date,",
				"          WITHDRWN_DT as date,",
				"          DELD_DT as date,",
				"          LATEST_PRPSL_RQSTD_DT as date,",
				"          LATEST_IMPLMNT_RQSTD_DT as date,",
				"          PRPSL_OR_REJCT_DT as date,",
				"          MERGED_DT as date,",
				"          CLNT_ACCNTG_CD as string,",
				"          CLNT_CNTCT_NM as binary,",
				"          CLNT_AFFCT_AREA_TXT as string,",
				"          AGRMT_REF_DTL_TXT as string,",
				"          SRVC_TYPE_TXT as string,",
				"          CLNT_APPRVL_NUM as integer,",
				"          RFS_GROUP_NM as string,",
				"          SRVC_PRVDR_ORGNZN_TXT as string,",
				"          PREDEFND_SRVCS_DESC as string,",
				"          SIEBEL_OPPRTNTY_NUM as string,",
				"          BTT_NUM as integer,",
				"          SLTN_OWNR_TXT as binary,",
				"          DLVR_CRDNTR_TXT as binary,",
				"          SLTN_DSGNR_TXT as binary,",
				"          CLAIM_ACCNT_CD as string,",
				"          CLAIM_WORK_ITEM_CD as string,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND as string,",
				"          RSRC_SUMRY_SERVER_COM_IND as string,",
				"          RSRC_SUMRY_STRG_COM_IND as string,",
				"          RSRC_SUMRY_HW_COM_IND as string,",
				"          RSRC_SUMRY_SOFTWR_COM_IND as string,",
				"          RJCT_RSN_CD as string,",
				"          RJCT_SRC_CD as string,",
				"          RJCT_EXPLNN_TXT as string,",
				"          PRICE_TYPE_CD as string,",
				"          RSN_CD as string,",
				"          PURCHS_ORDR_NM as string,",
				"          UNSLCTD_RQST_IND as string,",
				"          CNTRCT_CHNG_RQRD_IND as string,",
				"          OATS_RCD_RRQRD_IND as string,",
				"          NON_STD_T_AND_C_IND as string,",
				"          TRVL_INVC_IND as string,",
				"          TERMNTN_CHRGS_IND as string,",
				"          RNWL_MNTH_CD as string,",
				"          BYPSS_SLTN_DSGN_IND as string,",
				"          PRPSL_OWNR_TXT as binary,",
				"          ETL_JOB_ID as integer,",
				"          SRC_SYS_DIM_UID as integer,",
				"          HAS_PRNT_RFS_IND as string,",
				"          PRNT_PROC_DIM_UID as integer,",
				"          PRJCT_DIM_UID as integer,",
				"          L30_OFFRNG_ID_1 as string,",
				"          L30_OFFRNG_ID_2 as string,",
				"          L30_OFFRNG_ID_3 as string,",
				"          CLNT_PRPSL_RQSTD_FIRST_TM_DT as date,",
				"          CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT as date,",
				"          PRPSL_SENT_TO_CLNT_FIRST_TM_DT as date,",
				"          CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT as date,",
				"          CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT as date,",
				"          IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT as date,",
				"          GEO_DIM_UID as integer,",
				"          ORGNTG_ORG as string,",
				"          PRICER_NM as binary,",
				"          SOLTN_TEAM as string,",
				"          ERO_CHCKD_DT as date,",
				"          EA_CHCKD_DT as date,",
				"          CE_CHCKD_DT as date,",
				"          EXPORT_REG as string,",
				"          ENVMNTL_AFF as string,",
				"          CMPLNCE_ENGG as string,",
				"          GROSS_TCP_CTRY_CD as string,",
				"          GROSS_TCP_GEO_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     S.PCR_CRC_DIM_UID,\\n     S.PRPSL_PRICE_TERM_DIM_UID,\\n     S.CMPLXTY_DIM_UID,\\n     S.RQST_STAT_DIM_UID,\\n     S.RQST_TYPE_DIM_UID,\\n     S.RQST_RCVD_DT,\\n     S.PRPSL_RQST_DT,\\n     S.CLNT_RVSD_PRPSL_RQSTD_DT,\\n     S.PRPSL_SENT_TO_CLNT_DT,\\n     S.PRPSL_SENT_TO_CLNT_DT_WD,\\n     S.PRPSL_ACCPTD_DT,\\n     S.PRPSL_ACCPTD_DT_WD,\\n     S.PRPSL_REJCT_DT,\\n     S.RQST_IMPLMNT_CMPLTD_DT,\\n     S.CLNT_RVSD_RQST_IMPL_CMPL_DT,\\n     S.IMPLMNT_READY_CUST_ACCEPT_DT,\\n     S.IMPLMNT_READY_CUST_ACCEPT_DT_WD,\\n     S.PRPSL_EXP_DT, PRPSL_DSPSN_DT_WD,\\n     S.ON_HOLD_DT,\\n     S.WITHDRWN_DT,\\n     S.DELD_DT,\\n     S.LATEST_PRPSL_RQSTD_DT,\\n     S.LATEST_IMPLMNT_RQSTD_DT,\\n     S.PRPSL_OR_REJCT_DT,\\n     S.MERGED_DT,\\n     S.CLNT_ACCNTG_CD,\\n     S.CLNT_CNTCT_NM,\\n     S.CLNT_AFFCT_AREA_TXT,\\n     S.AGRMT_REF_DTL_TXT,\\n     S.SRVC_TYPE_TXT,\\n     S.CLNT_APPRVL_NUM,\\n     S.RFS_GROUP_NM,\\n     S.SRVC_PRVDR_ORGNZN_TXT,\\n     S.PREDEFND_SRVCS_DESC,\\n     S.SIEBEL_OPPRTNTY_NUM,\\n     S.BTT_NUM,\\n     S.SLTN_OWNR_TXT,\\n     S.DLVR_CRDNTR_TXT,\\n     S.SLTN_DSGNR_TXT,\\n     S.CLAIM_ACCNT_CD,\\n     S.CLAIM_WORK_ITEM_CD,\\n     S.RSRC_SUMRY_PRSNL_INVOLV_IND,\\n     S.RSRC_SUMRY_SERVER_COM_IND,\\n     S.RSRC_SUMRY_STRG_COM_IND,\\n     S.RSRC_SUMRY_HW_COM_IND,\\n     S.RSRC_SUMRY_SOFTWR_COM_IND,\\n     S.RJCT_RSN_CD,\\n     S.RJCT_SRC_CD,\\n     S.RJCT_EXPLNN_TXT,\\n     S.PRICE_TYPE_CD,\\n     S.RSN_CD,\\n     S.PURCHS_ORDR_NM,\\n     S.UNSLCTD_RQST_IND,\\n     S.CNTRCT_CHNG_RQRD_IND,\\n     S.OATS_RCD_RRQRD_IND,\\n     S.NON_STD_T_AND_C_IND,\\n     S.TRVL_INVC_IND,\\n     S.TERMNTN_CHRGS_IND,\\n     S.RNWL_MNTH_CD,\\n     S.BYPSS_SLTN_DSGN_IND,\\n     S.PRPSL_OWNR_TXT,\\n     S.ETL_JOB_ID,\\n     S.SRC_SYS_DIM_UID,\\n     S.HAS_PRNT_RFS_IND,\\n     S.PRNT_PROC_DIM_UID,\\n     S.PRJCT_DIM_UID,\\n     S.L30_OFFRNG_ID_1, \\n     S.L30_OFFRNG_ID_2, \\n     S.L30_OFFRNG_ID_3,\\n     S.CLNT_PRPSL_RQSTD_FIRST_TM_DT, \\n     S.CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT, \\n     S.PRPSL_SENT_TO_CLNT_FIRST_TM_DT, \\n     S.CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT, \\n     S.CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT, \\n     S.IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT,\\n    S.GEO_DIM_UID,\\n    S.ORGNTG_ORG,\\n    S.PRICER_NM,\\n    S.SOLTN_TEAM,\\n    S.ERO_CHCKD_DT, \\n    S.EA_CHCKD_DT,\\n    S.CE_CHCKD_DT,\\n    S.EXPORT_REG,\\n    S.ENVMNTL_AFF,\\n    S.CMPLNCE_ENGG,\\n    S.GROSS_TCP_CTRY_CD,\\n    S.GROSS_TCP_GEO_DIM_UID     \\nFrom\\n     PGMPDM.PCR_CRC_DIM as S\\n     inner join\\n     PGMPDM.ZAUX_DATE_TRIGGERS as ZDT\\n     on S.PCR_CRC_DIM_UID = ZDT.PROC_ID',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"dropUnchangedRows split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"joinIRFCAD, sortedLookupData join(sourcePCRCRCData@PCR_CRC_DIM_UID == LKP_PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          PCR_CRC_DIM_UID,",
				"          PRPSL_PRICE_TERM_DIM_UID,",
				"          CMPLXTY_DIM_UID,",
				"          RQST_STAT_DIM_UID,",
				"          RQST_TYPE_DIM_UID,",
				"          RQST_RCVD_DT,",
				"          PRPSL_RQST_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT,",
				"          PRPSL_SENT_TO_CLNT_DT,",
				"          PRPSL_SENT_TO_CLNT_DT_WD,",
				"          PRPSL_ACCPTD_DT,",
				"          PRPSL_ACCPTD_DT_WD,",
				"          PRPSL_REJCT_DT,",
				"          RQST_IMPLMNT_CMPLTD_DT,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD,",
				"          PRPSL_EXP_DT,",
				"          PRPSL_DSPSN_DT_WD,",
				"          ON_HOLD_DT,",
				"          WITHDRWN_DT,",
				"          DELD_DT,",
				"          LATEST_PRPSL_RQSTD_DT,",
				"          LATEST_IMPLMNT_RQSTD_DT,",
				"          PRPSL_OR_REJCT_DT,",
				"          MERGED_DT,",
				"          CLNT_ACCNTG_CD,",
				"          CLIENT_CNTCT_NAME,",
				"          CLNT_AFFCT_AREA_TXT,",
				"          AGRMT_REF_DTL_TXT,",
				"          SRVC_TYPE_TXT,",
				"          CLNT_APPRVL_NUM,",
				"          RFS_GROUP_NM,",
				"          SRVC_PRVDR_ORGNZN_TXT,",
				"          PREDEFND_SRVCS_DESC,",
				"          SIEBEL_OPPRTNTY_NUM,",
				"          BTT_NUM,",
				"          SOLTN_OWNER,",
				"          DLVR_COORDTR,",
				"          SOLTN_DESIGNER,",
				"          CLAIM_ACCNT_CD,",
				"          CLAIM_WORK_ITEM_CD,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND,",
				"          RSRC_SUMRY_SERVER_COM_IND,",
				"          RSRC_SUMRY_STRG_COM_IND,",
				"          RSRC_SUMRY_HW_COM_IND,",
				"          RSRC_SUMRY_SOFTWR_COM_IND,",
				"          RJCT_RSN_CD,",
				"          RJCT_SRC_CD,",
				"          RJCT_EXPLNN_TXT,",
				"          PRICE_TYPE_CD,",
				"          RSN_CD,",
				"          PURCHS_ORDR_NM,",
				"          UNSLCTD_RQST_IND,",
				"          CNTRCT_CHNG_RQRD_IND,",
				"          OATS_RCD_RRQRD_IND,",
				"          NON_STD_T_AND_C_IND,",
				"          TRVL_INVC_IND,",
				"          TERMNTN_CHRGS_IND,",
				"          RNWL_MNTH_CD,",
				"          BYPSS_SLTN_DSGN_IND,",
				"          PRPSL_OWNER,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          IS_DELETED,",
				"          HAS_PRNT_RFS_IND,",
				"          PRNT_PROC_DIM_UID,",
				"          PRJCT_DIM_UID,",
				"          L30_OFFRNG_ID_1,",
				"          L30_OFFRNG_ID_2,",
				"          L30_OFFRNG_ID_3,",
				"          GEO_DIM_UID,",
				"          ORGNTG_ORG,",
				"          PRICER_NM,",
				"          SOLTN_TEAM,",
				"          ERO_CHCKD_DT,",
				"          EA_CHCKD_DT,",
				"          CE_CHCKD_DT,",
				"          EXPORT_REG,",
				"          ENVMNTL_AFF,",
				"          CMPLNCE_ENGG,",
				"          GROSS_TCP_CTRY_CD,",
				"          GROSS_TCP_GEO_DIM_UID,",
				"          CLNT_PRPSL_RQSTD_FIRST_TM_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT,",
				"          PRPSL_SENT_TO_CLNT_FIRST_TM_DT,",
				"          CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          PCR_CRC_DIM_UID,",
				"          PRPSL_PRICE_TERM_DIM_UID,",
				"          CMPLXTY_DIM_UID,",
				"          RQST_STAT_DIM_UID,",
				"          RQST_TYPE_DIM_UID,",
				"          RQST_RCVD_DT,",
				"          PRPSL_RQST_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT,",
				"          PRPSL_SENT_TO_CLNT_DT,",
				"          PRPSL_SENT_TO_CLNT_DT_WD,",
				"          PRPSL_ACCPTD_DT,",
				"          PRPSL_ACCPTD_DT_WD,",
				"          PRPSL_REJCT_DT,",
				"          RQST_IMPLMNT_CMPLTD_DT,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD,",
				"          PRPSL_EXP_DT,",
				"          PRPSL_DSPSN_DT_WD,",
				"          ON_HOLD_DT,",
				"          WITHDRWN_DT,",
				"          DELD_DT,",
				"          LATEST_PRPSL_RQSTD_DT,",
				"          LATEST_IMPLMNT_RQSTD_DT,",
				"          PRPSL_OR_REJCT_DT,",
				"          MERGED_DT,",
				"          CLNT_ACCNTG_CD,",
				"          CLIENT_CNTCT_NAME,",
				"          CLNT_AFFCT_AREA_TXT,",
				"          AGRMT_REF_DTL_TXT,",
				"          SRVC_TYPE_TXT,",
				"          CLNT_APPRVL_NUM,",
				"          RFS_GROUP_NM,",
				"          SRVC_PRVDR_ORGNZN_TXT,",
				"          PREDEFND_SRVCS_DESC,",
				"          SIEBEL_OPPRTNTY_NUM,",
				"          BTT_NUM,",
				"          SOLTN_OWNER,",
				"          DLVR_COORDTR,",
				"          SOLTN_DESIGNER,",
				"          CLAIM_ACCNT_CD,",
				"          CLAIM_WORK_ITEM_CD,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND,",
				"          RSRC_SUMRY_SERVER_COM_IND,",
				"          RSRC_SUMRY_STRG_COM_IND,",
				"          RSRC_SUMRY_HW_COM_IND,",
				"          RSRC_SUMRY_SOFTWR_COM_IND,",
				"          RJCT_RSN_CD,",
				"          RJCT_SRC_CD,",
				"          RJCT_EXPLNN_TXT,",
				"          PRICE_TYPE_CD,",
				"          RSN_CD,",
				"          PURCHS_ORDR_NM,",
				"          UNSLCTD_RQST_IND,",
				"          CNTRCT_CHNG_RQRD_IND,",
				"          OATS_RCD_RRQRD_IND,",
				"          NON_STD_T_AND_C_IND,",
				"          TRVL_INVC_IND,",
				"          TERMNTN_CHRGS_IND,",
				"          RNWL_MNTH_CD,",
				"          BYPSS_SLTN_DSGN_IND,",
				"          PRPSL_OWNER,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          IS_DELETED,",
				"          HAS_PRNT_RFS_IND,",
				"          PRNT_PROC_DIM_UID,",
				"          PRJCT_DIM_UID,",
				"          L30_OFFRNG_ID_1,",
				"          L30_OFFRNG_ID_2,",
				"          L30_OFFRNG_ID_3,",
				"          GEO_DIM_UID,",
				"          ORGNTG_ORG,",
				"          PRICER_NM,",
				"          SOLTN_TEAM,",
				"          ERO_CHCKD_DT,",
				"          EA_CHCKD_DT,",
				"          CE_CHCKD_DT,",
				"          EXPORT_REG,",
				"          ENVMNTL_AFF,",
				"          CMPLNCE_ENGG,",
				"          GROSS_TCP_CTRY_CD,",
				"          GROSS_TCP_GEO_DIM_UID,",
				"          CLNT_PRPSL_RQSTD_FIRST_TM_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT,",
				"          PRPSL_SENT_TO_CLNT_FIRST_TM_DT,",
				"          CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"dropUnwantedKeyColumns derive(ROW_STATUS = case(isNull(PCR_CRC_DIM_UID) && not(isNull(LKP_PCR_CRC_DIM_UID)), 'D', case(not(isNull(PCR_CRC_DIM_UID)) && isNull(LKP_PCR_CRC_DIM_UID), 'I', case(HASHED_VAL == LKP_HASHED_VAL, 'L', 'U')))) ~> CDCval",
				"CDCval filter(ROW_STATUS != 'L') ~> dropUnchangedRows",
				"lookupHashColumn select(mapColumn(",
				"          each(match(true()),",
				"               'LKP_'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamedColumns",
				"renamedColumns sort(asc(LKP_PCR_CRC_DIM_UID, false)) ~> sortedLookupData",
				"getSourcePCRData, getSourceCRCData union(byName: true)~> sourcePCRCRCData",
				"hashColumn, clientProposalRqstDate join(sourcePCRCRCData@PCR_CRC_DIM_UID == clientProposalRqstDate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCPRD",
				"joinCPRD, clientRevisedProposalRqstDate join(sourcePCRCRCData@PCR_CRC_DIM_UID == clientRevisedProposalRqstDate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCRPRD",
				"joinCRPRD, proposalSentToClientDate join(sourcePCRCRCData@PCR_CRC_DIM_UID == proposalSentToClientDate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPSTCD",
				"joinPSTCD, clientRqstImplementCompletionDate join(sourcePCRCRCData@PCR_CRC_DIM_UID == clientRqstImplementCompletionDate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCRICD",
				"joinCRICD, clientRevisedRqstImplementCompletionDate join(sourcePCRCRCData@PCR_CRC_DIM_UID == clientRevisedRqstImplementCompletionDate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCRRICD",
				"joinCRRICD, implementationReadyForCADate join(sourcePCRCRCData@PCR_CRC_DIM_UID == implementationReadyForCADate@PCR_CRC_DIM_UID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinIRFCAD",
				"mergedData select(mapColumn(",
				"          PCR_CRC_DIM_UID = sourcePCRCRCData@PCR_CRC_DIM_UID,",
				"          PRPSL_PRICE_TERM_DIM_UID,",
				"          CMPLXTY_DIM_UID,",
				"          RQST_STAT_DIM_UID,",
				"          RQST_TYPE_DIM_UID,",
				"          RQST_RCVD_DT,",
				"          PRPSL_RQST_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_DT,",
				"          PRPSL_SENT_TO_CLNT_DT,",
				"          PRPSL_SENT_TO_CLNT_DT_WD,",
				"          PRPSL_ACCPTD_DT,",
				"          PRPSL_ACCPTD_DT_WD,",
				"          PRPSL_REJCT_DT,",
				"          RQST_IMPLMNT_CMPLTD_DT,",
				"          CLNT_RVSD_RQST_IMPL_CMPL_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT,",
				"          IMPLMNT_READY_CUST_ACCEPT_DT_WD,",
				"          PRPSL_EXP_DT,",
				"          PRPSL_DSPSN_DT_WD,",
				"          ON_HOLD_DT,",
				"          WITHDRWN_DT,",
				"          DELD_DT,",
				"          LATEST_PRPSL_RQSTD_DT,",
				"          LATEST_IMPLMNT_RQSTD_DT,",
				"          PRPSL_OR_REJCT_DT,",
				"          MERGED_DT,",
				"          CLNT_ACCNTG_CD,",
				"          CLIENT_CNTCT_NAME,",
				"          CLNT_AFFCT_AREA_TXT,",
				"          AGRMT_REF_DTL_TXT,",
				"          SRVC_TYPE_TXT,",
				"          CLNT_APPRVL_NUM,",
				"          RFS_GROUP_NM,",
				"          SRVC_PRVDR_ORGNZN_TXT,",
				"          PREDEFND_SRVCS_DESC,",
				"          SIEBEL_OPPRTNTY_NUM,",
				"          BTT_NUM,",
				"          SOLTN_OWNER,",
				"          DLVR_COORDTR,",
				"          SOLTN_DESIGNER,",
				"          CLAIM_ACCNT_CD,",
				"          CLAIM_WORK_ITEM_CD,",
				"          RSRC_SUMRY_PRSNL_INVOLV_IND,",
				"          RSRC_SUMRY_SERVER_COM_IND,",
				"          RSRC_SUMRY_STRG_COM_IND,",
				"          RSRC_SUMRY_HW_COM_IND,",
				"          RSRC_SUMRY_SOFTWR_COM_IND,",
				"          RJCT_RSN_CD,",
				"          RJCT_SRC_CD,",
				"          RJCT_EXPLNN_TXT,",
				"          PRICE_TYPE_CD,",
				"          RSN_CD,",
				"          PURCHS_ORDR_NM,",
				"          UNSLCTD_RQST_IND,",
				"          CNTRCT_CHNG_RQRD_IND,",
				"          OATS_RCD_RRQRD_IND,",
				"          NON_STD_T_AND_C_IND,",
				"          TRVL_INVC_IND,",
				"          TERMNTN_CHRGS_IND,",
				"          RNWL_MNTH_CD,",
				"          BYPSS_SLTN_DSGN_IND,",
				"          PRPSL_OWNER,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          IS_DELETED,",
				"          HAS_PRNT_RFS_IND,",
				"          PRNT_PROC_DIM_UID,",
				"          PRJCT_DIM_UID,",
				"          L30_OFFRNG_ID_1,",
				"          L30_OFFRNG_ID_2,",
				"          L30_OFFRNG_ID_3,",
				"          GEO_DIM_UID,",
				"          ORGNTG_ORG,",
				"          PRICER_NM,",
				"          SOLTN_TEAM,",
				"          ERO_CHCKD_DT,",
				"          EA_CHCKD_DT,",
				"          CE_CHCKD_DT,",
				"          EXPORT_REG,",
				"          ENVMNTL_AFF,",
				"          CMPLNCE_ENGG,",
				"          GROSS_TCP_CTRY_CD,",
				"          GROSS_TCP_GEO_DIM_UID,",
				"          CLNT_PRPSL_RQSTD_FIRST_TM_DT,",
				"          CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT,",
				"          PRPSL_SENT_TO_CLNT_FIRST_TM_DT,",
				"          CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT,",
				"          HASHED_VAL,",
				"          LKP_PCR_CRC_DIM_UID,",
				"          LKP_PRPSL_PRICE_TERM_DIM_UID,",
				"          LKP_CMPLXTY_DIM_UID,",
				"          LKP_RQST_STAT_DIM_UID,",
				"          LKP_RQST_TYPE_DIM_UID,",
				"          LKP_RQST_RCVD_DT,",
				"          LKP_PRPSL_RQST_DT,",
				"          LKP_CLNT_RVSD_PRPSL_RQSTD_DT,",
				"          LKP_PRPSL_SENT_TO_CLNT_DT,",
				"          LKP_PRPSL_SENT_TO_CLNT_DT_WD,",
				"          LKP_PRPSL_ACCPTD_DT,",
				"          LKP_PRPSL_ACCPTD_DT_WD,",
				"          LKP_PRPSL_REJCT_DT,",
				"          LKP_RQST_IMPLMNT_CMPLTD_DT,",
				"          LKP_CLNT_RVSD_RQST_IMPL_CMPL_DT,",
				"          LKP_IMPLMNT_READY_CUST_ACCEPT_DT,",
				"          LKP_IMPLMNT_READY_CUST_ACCEPT_DT_WD,",
				"          LKP_PRPSL_EXP_DT,",
				"          LKP_PRPSL_DSPSN_DT_WD,",
				"          LKP_ON_HOLD_DT,",
				"          LKP_WITHDRWN_DT,",
				"          LKP_DELD_DT,",
				"          LKP_LATEST_PRPSL_RQSTD_DT,",
				"          LKP_LATEST_IMPLMNT_RQSTD_DT,",
				"          LKP_PRPSL_OR_REJCT_DT,",
				"          LKP_MERGED_DT,",
				"          LKP_CLNT_ACCNTG_CD,",
				"          LKP_CLNT_CNTCT_NM,",
				"          LKP_CLNT_AFFCT_AREA_TXT,",
				"          LKP_AGRMT_REF_DTL_TXT,",
				"          LKP_SRVC_TYPE_TXT,",
				"          LKP_CLNT_APPRVL_NUM,",
				"          LKP_RFS_GROUP_NM,",
				"          LKP_SRVC_PRVDR_ORGNZN_TXT,",
				"          LKP_PREDEFND_SRVCS_DESC,",
				"          LKP_SIEBEL_OPPRTNTY_NUM,",
				"          LKP_BTT_NUM,",
				"          LKP_SLTN_OWNR_TXT,",
				"          LKP_DLVR_CRDNTR_TXT,",
				"          LKP_SLTN_DSGNR_TXT,",
				"          LKP_CLAIM_ACCNT_CD,",
				"          LKP_CLAIM_WORK_ITEM_CD,",
				"          LKP_RSRC_SUMRY_PRSNL_INVOLV_IND,",
				"          LKP_RSRC_SUMRY_SERVER_COM_IND,",
				"          LKP_RSRC_SUMRY_STRG_COM_IND,",
				"          LKP_RSRC_SUMRY_HW_COM_IND,",
				"          LKP_RSRC_SUMRY_SOFTWR_COM_IND,",
				"          LKP_RJCT_RSN_CD,",
				"          LKP_RJCT_SRC_CD,",
				"          LKP_RJCT_EXPLNN_TXT,",
				"          LKP_PRICE_TYPE_CD,",
				"          LKP_RSN_CD,",
				"          LKP_PURCHS_ORDR_NM,",
				"          LKP_UNSLCTD_RQST_IND,",
				"          LKP_CNTRCT_CHNG_RQRD_IND,",
				"          LKP_OATS_RCD_RRQRD_IND,",
				"          LKP_NON_STD_T_AND_C_IND,",
				"          LKP_TRVL_INVC_IND,",
				"          LKP_TERMNTN_CHRGS_IND,",
				"          LKP_RNWL_MNTH_CD,",
				"          LKP_BYPSS_SLTN_DSGN_IND,",
				"          LKP_PRPSL_OWNR_TXT,",
				"          LKP_ETL_JOB_ID,",
				"          LKP_SRC_SYS_DIM_UID,",
				"          LKP_HAS_PRNT_RFS_IND,",
				"          LKP_PRNT_PROC_DIM_UID,",
				"          LKP_PRJCT_DIM_UID,",
				"          LKP_L30_OFFRNG_ID_1,",
				"          LKP_L30_OFFRNG_ID_2,",
				"          LKP_L30_OFFRNG_ID_3,",
				"          LKP_CLNT_PRPSL_RQSTD_FIRST_TM_DT,",
				"          LKP_CLNT_RVSD_PRPSL_RQSTD_FIRST_TM_DT,",
				"          LKP_PRPSL_SENT_TO_CLNT_FIRST_TM_DT,",
				"          LKP_CLNT_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          LKP_CLNT_RVSD_RQSTD_IMPLMTN_CMPLT_FIRST_TM_DT,",
				"          LKP_IMPLMTN_READY_FOR_CUST_ACCPTNC_FIRST_TM_DT,",
				"          LKP_GEO_DIM_UID,",
				"          LKP_ORGNTG_ORG,",
				"          LKP_PRICER_NM,",
				"          LKP_SOLTN_TEAM,",
				"          LKP_ERO_CHCKD_DT,",
				"          LKP_EA_CHCKD_DT,",
				"          LKP_CE_CHCKD_DT,",
				"          LKP_EXPORT_REG,",
				"          LKP_ENVMNTL_AFF,",
				"          LKP_CMPLNCE_ENGG,",
				"          LKP_GROSS_TCP_CTRY_CD,",
				"          LKP_GROSS_TCP_GEO_DIM_UID,",
				"          LKP_HASHED_VAL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dropUnwantedKeyColumns",
				"sourcePCRCRCData derive(HASHED_VAL = sha2(256, byNames(split($hash_columns, ',')))) ~> hashColumn",
				"getLookupData derive(HASHED_VAL = sha2(256, byNames(split($hash_columns, ',')))) ~> lookupHashColumn",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'PCR_CRC_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['PCR_CRC_DIM_UID'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'PCR_CRC_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}