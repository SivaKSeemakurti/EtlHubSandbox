{
	"name": "DF_BALD0130_CLNT_DIM",
	"properties": {
		"folder": {
			"name": "PGMP/Dimension"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getSourceData"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "getLookupData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "updateTable"
				},
				{
					"linkedService": {
						"referenceName": "ls_pgmp_rfs_db",
						"type": "LinkedServiceReference"
					},
					"name": "insertTable"
				}
			],
			"transformations": [
				{
					"name": "sortedLookupData"
				},
				{
					"name": "updateRows"
				},
				{
					"name": "CDC"
				},
				{
					"name": "mergedData"
				},
				{
					"name": "selectInsertData"
				},
				{
					"name": "addColumns1"
				},
				{
					"name": "addColumns2"
				},
				{
					"name": "selectUpdateData"
				},
				{
					"name": "CDCval"
				}
			],
			"scriptLines": [
				"parameters{",
				"     current_user as string",
				"}",
				"source(output(",
				"          CLNT_DIM_UID as integer,",
				"          PST_CLNT_ACCT_ID as integer,",
				"          CLNT_NM as string,",
				"          CMR_LCT_TXT as string,",
				"          CLNT_ACTV_IND as string,",
				"          CLNT_TYPE_CD as string,",
				"          CLNT_PREFX_TXT as string,",
				"          CTRY_CD as string,",
				"          CLNT_MSTR_AGRMT_LCTN_TXT as string,",
				"          CLNT_ACCT_DTL_VRFD_IND as string,",
				"          CLNT_SRVC_PRVDR_NUM as integer,",
				"          CLNT_RGN_NUM as integer,",
				"          SRC_CRETD_TMS as timestamp,",
				"          SRC_CRETD_USER_ID as string,",
				"          SRC_UPDTD_TMS as timestamp,",
				"          SRC_UPDTD_USER_ID as string,",
				"          ETL_JOB_ID as integer,",
				"          ETL_EXCTN_ID as integer,",
				"          SRC_SYS_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     C.CLIENT_ID as CLNT_DIM_UID,\\n     C.CLIENT_ID as PST_CLNT_ACCT_ID,\\n     C.NAME as CLNT_NM,\\n     C.CMR_LOCATE as CMR_LCT_TXT,\\n     cast(coalesce(C.CLNT_ACTV_FLAG, PC.CLIENT_ACTV_FLAG, \\'N\\') as char(1)) as CLNT_ACTV_IND,\\n     PC.CLIENT_TYPE_CD as CLNT_TYPE_CD,\\n     PC.CLIENT_PREFIX as CLNT_PREFX_TXT,\\n     PC.COUNTRY_CD as CTRY_CD,\\n     PC.CLNT_MSTR_AGRMNT_LCTN_TXT as CLNT_MSTR_AGRMT_LCTN_TXT,\\n     PC.CLNT_ACCT_DTLS_VRFD_IND as CLNT_ACCT_DTL_VRFD_IND,\\n     PC.CLNT_SRVC_PRVDR_NUM as CLNT_SRVC_PRVDR_NUM,\\n     PC.CLNT_RGN_NUM as CLNT_RGN_NUM,\\n     C.CREATED_TS as SRC_CRETD_TMS,\\n     C.CREATED_USERID as SRC_CRETD_USER_ID,\\n     C.UPDATED_TS as SRC_UPDTD_TMS,\\n     C.UPDATED_USERID as SRC_UPDTD_USER_ID,\\n     JOB.ETL_JOB_ID,\\n     FIL.ETL_EXCTN_ID,\\n     SYS.SRC_SYS_DIM_UID     \\nFrom\\n     APPFUN.CLIENT C\\n     left join\\n     APPFUN.PST_CLIENT_ACCT PC\\n     on C.CLIENT_ID = PST_CLIENT_ACCT_ID\\n     left join (\\n          Select\\n               coalesce(max(ETL_JOB_ID), -1) as ETL_JOB_ID\\n          From\\n               PGMPDM.ZAUX_ETL_JOBS\\n          Where\\n               ETL_JOB_NM = \\'BALD0130_CLNT_DIM\\'\\n     ) JOB\\n     on 1 = 1\\n     left join (\\n          Select\\n               ETL_EXCTN_ID,\\n               ETL_PARAM_START_TMS,\\n               ETL_PARAM_END_TMS\\n          From\\n               PGMPDM.ZAUX_ETL_EXCTN\\n          Where\\n               IS_CURR_IND = \\'Y\\'\\n     ) FIL\\n     on 1 = 1\\n     left join  (\\n          Select\\n               coalesce(max(SRC_SYS_DIM_UID), -1) as SRC_SYS_DIM_UID\\n          From\\n               PGMPDM.SRC_SYS_DIM\\n          Where\\n               SRC_SYS_CD = \\'PGMP\\'\\n     ) SYS\\n     on 1 = 1',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getSourceData",
				"source(output(",
				"          LKP_CLNT_DIM_UID as integer,",
				"          LKP_PST_CLNT_ACCT_ID as integer,",
				"          LKP_CLNT_NM as string,",
				"          LKP_CMR_LCT_TXT as string,",
				"          LKP_CLNT_ACTV_IND as string,",
				"          LKP_CLNT_TYPE_CD as string,",
				"          LKP_CLNT_PREFX_TXT as string,",
				"          LKP_CTRY_CD as string,",
				"          LKP_CLNT_MSTR_AGRMT_LCTN_TXT as string,",
				"          LKP_CLNT_ACCT_DTL_VRFD_IND as string,",
				"          LKP_CLNT_SRVC_PRVDR_NUM as integer,",
				"          LKP_CLNT_RGN_NUM as integer,",
				"          LKP_SRC_CRETD_TMS as timestamp,",
				"          LKP_SRC_CRETD_USER_ID as string,",
				"          LKP_SRC_UPDTD_TMS as timestamp,",
				"          LKP_SRC_UPDTD_USER_ID as string,",
				"          LKP_ETL_JOB_ID as integer,",
				"          LKP_SRC_SYS_DIM_UID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'Select\\n     CLNT_DIM_UID as LKP_CLNT_DIM_UID,\\n     PST_CLNT_ACCT_ID as LKP_PST_CLNT_ACCT_ID,\\n     CLNT_NM as LKP_CLNT_NM,\\n     CMR_LCT_TXT as LKP_CMR_LCT_TXT,\\n     CLNT_ACTV_IND as LKP_CLNT_ACTV_IND,\\n     CLNT_TYPE_CD as LKP_CLNT_TYPE_CD,\\n     CLNT_PREFX_TXT as LKP_CLNT_PREFX_TXT,\\n     CTRY_CD as LKP_CTRY_CD,\\n     CLNT_MSTR_AGRMT_LCTN_TXT as LKP_CLNT_MSTR_AGRMT_LCTN_TXT,\\n     CLNT_ACCT_DTL_VRFD_IND as LKP_CLNT_ACCT_DTL_VRFD_IND,\\n     CLNT_SRVC_PRVDR_NUM as LKP_CLNT_SRVC_PRVDR_NUM,\\n     CLNT_RGN_NUM as LKP_CLNT_RGN_NUM,\\n     SRC_CRETD_TMS as LKP_SRC_CRETD_TMS,\\n     SRC_CRETD_USER_ID as LKP_SRC_CRETD_USER_ID,\\n     SRC_UPDTD_TMS as LKP_SRC_UPDTD_TMS,\\n     SRC_UPDTD_USER_ID as LKP_SRC_UPDTD_USER_ID,\\n     ETL_JOB_ID as LKP_ETL_JOB_ID,\\n     SRC_SYS_DIM_UID as LKP_SRC_SYS_DIM_UID\\nFrom\\n     PGMPDM.CLNT_DIM',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> getLookupData",
				"getLookupData sort(asc(LKP_CLNT_DIM_UID, false)) ~> sortedLookupData",
				"selectUpdateData alterRow(updateIf(true())) ~> updateRows",
				"CDCval split(ROW_STATUS!='I',",
				"     disjoint: false) ~> CDC@(dataToBeUpdated, dataToBeInserted)",
				"getSourceData, sortedLookupData join(CLNT_DIM_UID == LKP_CLNT_DIM_UID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> mergedData",
				"addColumns2 select(mapColumn(",
				"          CLNT_DIM_UID,",
				"          PST_CLNT_ACCT_ID,",
				"          CLNT_NM,",
				"          CMR_LCT_TXT,",
				"          CLNT_ACTV_IND,",
				"          CLNT_TYPE_CD,",
				"          CLNT_PREFX_TXT,",
				"          CTRY_CD,",
				"          CLNT_MSTR_AGRMT_LCTN_TXT,",
				"          CLNT_ACCT_DTL_VRFD_IND,",
				"          CLNT_SRVC_PRVDR_NUM,",
				"          CLNT_RGN_NUM,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_CRETD_TMS,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInsertData",
				"CDC@dataToBeUpdated derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns1",
				"CDC@dataToBeInserted derive(DM_CRETD_USER_ID = $current_user,",
				"          DM_CRETD_TMS = currentTimestamp(),",
				"          DM_UPDTD_USER_ID = $current_user,",
				"          DM_UPDTD_TMS = currentTimestamp()) ~> addColumns2",
				"addColumns1 select(mapColumn(",
				"          CLNT_DIM_UID,",
				"          PST_CLNT_ACCT_ID,",
				"          CLNT_NM,",
				"          CMR_LCT_TXT,",
				"          CLNT_ACTV_IND,",
				"          CLNT_TYPE_CD,",
				"          CLNT_PREFX_TXT,",
				"          CTRY_CD,",
				"          CLNT_MSTR_AGRMT_LCTN_TXT,",
				"          CLNT_ACCT_DTL_VRFD_IND,",
				"          CLNT_SRVC_PRVDR_NUM,",
				"          CLNT_RGN_NUM,",
				"          SRC_CRETD_TMS,",
				"          SRC_CRETD_USER_ID,",
				"          SRC_UPDTD_TMS,",
				"          SRC_UPDTD_USER_ID,",
				"          ETL_JOB_ID,",
				"          ETL_EXCTN_ID,",
				"          SRC_SYS_DIM_UID,",
				"          ROW_STAT_CD = ROW_STATUS,",
				"          DM_CRETD_USER_ID,",
				"          DM_UPDTD_USER_ID,",
				"          DM_UPDTD_TMS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectUpdateData",
				"mergedData derive(ROW_STATUS = case(CLNT_DIM_UID == toInteger(null()) && LKP_CLNT_DIM_UID != toInteger(null()), 'D', case(CLNT_DIM_UID != toInteger(null()) && LKP_CLNT_DIM_UID == toInteger(null()), 'I', 'U'))) ~> CDCval",
				"updateRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CLNT_DIM',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CLNT_DIM_UID'],",
				"     skipKeyWrites:true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     preCommands: [],",
				"     postCommands: []) ~> updateTable",
				"selectInsertData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'PGMPDM',",
				"     tableName: 'CLNT_DIM',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> insertTable"
			]
		}
	}
}