{
	"name": "nb_dht_Service_load",
	"properties": {
		"folder": {
			"name": "ETLHub/Dimensions&Facts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPool001494New",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "472g",
			"driverCores": 80,
			"executorMemory": "472g",
			"executorCores": 80,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "39489d35-bb29-4c97-9706-a7eaf0c8946c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPool001494New",
				"name": "sPool001494New",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPool001494New",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 80,
				"memory": 472,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Service data load**\n",
					"\n",
					"This notebook loads data to deltalake table etlhubconfirmed.dht_market by sourceing data from ESA Kyndryl.\n",
					"Since ESA is not accessible from Azure, a datastage job srcESA_Service_Azure is executed on datastage to push the ESA extract to adls.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Import all the necessary libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobClient\n",
					"import pandas as pd\n",
					"from io import StringIO\n",
					"from pyspark.sql.functions import md5, concat_ws,trim\n",
					"from sqlite3 import connect\n",
					"from pyspark.sql import functions as F\n",
					"#conn = connect(':memory:')\n",
					"from pyspark.sql import SparkSession \n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql.types import * \n",
					"from delta.tables import *\n",
					"import os\n",
					"import sys\n",
					"from datetime import datetime"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"account_name = 'adls4fsoetlhubdevuseast' # fill in your primary account name \n",
					"container_name = 'etlhubfilestorage' # fill in your container name \n",
					"relative_path = 'extract/ESA/' # fill in your relative folder path \n",
					"relative_archive_path='archive/'\n",
					"file_name='DS_SERVICE_DATA.csv' \n",
					"natural_key=\"OFFERING_COMPNT_CD\"\n",
					"tablename=\"etlhubConfirmed.dht_service\"\n",
					"stagingtable=\"DHTS_SERVICE\"\n",
					"keycolumn=\"SERVICE_COMPONENT_KEY\"\n",
					"date = datetime.now().strftime(\"%Y-%m-%d-%I:%M:%S_%p\")\n",
					"print(date)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Copy source CSV file to archive folder including timestamp in file name"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Read data from adls csv file extracted from source at \n",
					"https://adls4fsoetlhubdevuseast.dfs.core.windows.net/etlhubfilestorage/extract/ESA/DS_SALES_STAGE_DATA.csv"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \n",
					"print('Primary storage account path: ' + adls_path) \n",
					"\n",
					"adls_arch_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_archive_path) \n",
					"print('Primary storage account path: ' + adls_path) \n",
					"\n",
					"relative_archive_path\n",
					"# Read a csv file \n",
					"csv_path = adls_path + file_name\n",
					"arch_fil_name=file_name.rsplit(\".\")\n",
					"csv_archive_path = adls_arch_path + arch_fil_name[0] + '_' + date + '.' + arch_fil_name[1]\n",
					"print (csv_archive_path)\n",
					"incrementalData_DF = spark.read.load(csv_path,format=\"csv\", sep=\"||\", header=\"true\")\n",
					"#incrementalData_DF.show()\n",
					"incrementalData_DF.write.csv(csv_archive_path, header = 'true')\n",
					"# Get column list for creating Rec_Checksum\n",
					"\n",
					"col_list=[]\n",
					"for i in incrementalData_DF.columns:\n",
					"    col_list.append(i)\n",
					"\n",
					"# Add a checsum column to help identify the changed rows\n",
					"print(col_list)\n",
					"incrementalData_SDF1 = incrementalData_DF.withColumn(\"nk_hash\",md5(natural_key))\n",
					"incrementalData_DF2 = incrementalData_SDF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#Create a dataframe with target deltalake table data with necessary columns\n",
					"\n",
					"existingDataDF=spark.sql(\"SELECT * FROM {}  WHERE CURRENT_IND='Y'\".format(tablename))\n",
					"\n",
					"existingMaxKeyDF=spark.sql(\"SELECT MAX({}) existing_MAX_KEY from {} WHERE CURRENT_IND='Y'\".format(keycolumn,tablename))\n",
					"\n",
					"# prefix all columns from target table with 'existing_'. This will help to differentiate columns when incremental and existing DF's are joined\n",
					"\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\n",
					"\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF1')\n",
					"\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1, col(natural_key) == col(\"existing_\" + natural_key), \"fullouter\")\n",
					"\n",
					"fullJoin2=fullJoin1.join(existingMaxKeyDF,None,\"CROSS\")\n",
					"\n",
					"fullJoin2.createOrReplaceTempView('fullJoin')\n",
					"\n",
					"fullJoin2.write \\\n",
					"  .format(\"delta\") \\\n",
					"  .mode(\"overwrite\") \\\n",
					"  .option(\"overwriteSchema\", \"true\") \\\n",
					"  .option(\"path\", \"abfss://etlhubfilestorage@adls4fsoetlhubdevuseast.dfs.core.windows.net/deltalake/staging/{}\".format(stagingtable)) \\\n",
					"  .saveAsTable(stagingtable)\n",
					"   #.option(\"overwriteSchema\", \"true\") \\  .save(\"\") \\"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Data Validation Checks :\n",
					"\n",
					"- Check for duplicates in Source data based on natural key\n",
					"- Check for duplicates in target delta lake table based on natural key\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry3=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM incrementalData_DF2 GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry4=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM {} WHERE CURRENT_IND='Y' GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"df3=spark.sql(qry3.format(natural_key,natural_key))\n",
					"cnt1=df3.count()\n",
					"\n",
					"print (cnt1)\n",
					"if cnt1 == 0:\n",
					"    print(\"No Duplicates in source data\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in source:\")\n",
					"    df3.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(1)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"df4=spark.sql(qry4.format(natural_key,tablename,natural_key))\n",
					"cnt2=df4.count()\n",
					"\n",
					"print (cnt2)\n",
					"if cnt2 == 0:\n",
					"    print(\"no duplicates in target delta lake table\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in target delta lake table:\")\n",
					"    df4.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry_4_recon1=\"\"\"\n",
					"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable,tablename,natural_key,natural_key))\n",
					"print('New records or Inserts are:') \n",
					"df_4_recon1.show()\n",
					"\n",
					"qry_4_recon2=\"\"\"\n",
					"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon2=spark.sql(qry_4_recon2.format(stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))\n",
					"print('Changed records or Updates are:') \n",
					"df_4_recon2.show()\n",
					"\n",
					"qry_4_recon3=\"\"\"\n",
					"SELECT COUNT(*) from \n",
					"{} A\n",
					"join fullJoin B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"\n",
					"\"\"\"\n",
					"\n",
					"df_4_recon3=spark.sql(qry_4_recon3.format(tablename,natural_key,natural_key,natural_key))\n",
					"print('Soft Deletes are:') \n",
					"df_4_recon3.show()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"#Insert for New rows which are missing in target and present in source based on Natural Key.\n",
					"\n",
					"qry_4_recon1=\"\"\"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable, tablename, natural_key, natural_key))\n",
					"\n",
					"qry_ins_new_rows=\"\"\"\n",
					"\n",
					"INSERT INTO {}\n",
					"\tselect \n",
					"\tCOALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY 1) AS {},1 as SERVICE_COMPONENT_VERSION \n",
					"    ,OFFERING_COMPNT_CD\n",
					"\t,OFFERING_COMPNT_DESC\n",
					"\t,-1 as OFFERING_CODE_KEY\n",
					"\t,OFFERING_CD\n",
					"\t,OFFERING_DESC\n",
					"\t,-1 as SERVICE_KEY\n",
					"\t,SERVICE_CD\n",
					"\t,SERVICE_DESC\n",
					"\t,-1 as OFFERING_CATEGORY_KEY\n",
					"\t,OFFERING_CAT_CD\n",
					"\t,OFFERING_CAT_DESC\n",
					"\t,OFFERING_GROUP\n",
					"\t,-1 as BUS_MEASMNT_DIV_KEY\n",
					"\t,BUS_MEASMNT_DIV_CD\n",
					"\t,'' as BUS_MEASMNT_DIV_DESC\n",
					"\t,-1 as LOB_KEY\n",
					"\t,'' as LOB_CD\n",
					"\t,'' as LOB_DESC\n",
					"\t,-1 as BUSINESS_UNIT_KEY\n",
					"\t,'' as BUSINESS_UNIT_ID\n",
					"\t,'' as BUSINESS_UNIT_DESC\n",
					"\t,'Y' AS CURRENT_IND\n",
					"\t,CURRENT_TIMESTAMP AS EXTRACT_DT\n",
					"\t,CURRENT_TIMESTAMP AS REC_START_DT\n",
					"\t,'9999-12-31 00:00:00.000' as REC_END_DT\n",
					"\t,'ESA' AS SOURCE_SYSTEM\n",
					"\t,column_hash as REC_CHECKSUM\n",
					"\t,'I' as REC_STATUS\n",
					"\t,current_timestamp as IMG_LST_UPD_DT\n",
					"\t,CURRENT_TIMESTAMP AS IMG_CREATED_DT\n",
					"\t,OFFERING_COMPNT_STATUS_CD\n",
					"\t,OFFERING_COMPNT_STATUS_DESC\n",
					"\t,OFFERING_AREA_CODE\n",
					"\t,OFFERING_AREA_DESC\n",
					"\t,SERVICE_GROUP_CODE\n",
					"\t,SERVICE_GROUP_DESC\n",
					"\t,BRAND_CODE\n",
					"\t,BRAND_DESC\n",
					"\t,-1 as SERVICE_GROUP_KEY\n",
					"\t,'ED' AS DATA_IND\n",
					"\t,'Y' AS ACTIVE_IN_SOURCE_IND \n",
					"    from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"d=spark.sql(qry_ins_new_rows.format(tablename,keycolumn,stagingtable,tablename,natural_key, natural_key ))\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Update or expire the rows with existing instance of the changed rows:\n",
					"qry_4_upd_changes_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.{}\n",
					"AND LOWER(B.{}) = LOWER(B.existing_{}) \n",
					"and LOWER(B.column_hash) <> LOWER(B.existing_rec_checksum)\n",
					"AND A.CURRENT_IND='Y' AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET CURRENT_IND='N'\n",
					"    ,REC_END_DT= existing_REC_START_DT -  INTERVAL 5 seconds --current_timestamp --existing_REC_START_DT-1\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					";\n",
					"\"\"\"\n",
					"f=spark.sql(qry_4_upd_changes_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key,natural_key))\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"--existing data\n",
					"select 'existing data',count(*) from DHTS_SALES_STAGE where existing_CURRENT_IND='Y';\n",
					"  \n",
					"select 'rows for Update', count(*)\n",
					"from etlhubConfirmed.dht_service B\n",
					"join\n",
					"DHTS_SERVICE A \n",
					"WHERE A.OFFERING_COMPNT_CD = B.OFFERING_COMPNT_CD\n",
					"and LOWER(A.OFFERING_COMPNT_CD) = LOWER(A.existing_OFFERING_COMPNT_CD) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND B.REC_START_DT=A.existing_REC_START_DT\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM etlhubConfirmed.DHT_SERVICE B\n",
					"WHERE LOWER(A.OFFERING_COMPNT_CD)=LOWER(B.OFFERING_COMPNT_CD)\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\n",
					"SELECT COUNT(*) FROM etlhubConfirmed.DHT_SERVICE A\n",
					"JOIN DHTS_SERVICE B\n",
					"ON A.OFFERING_COMPNT_CD = B.OFFERING_COMPNT_CD\n",
					"AND LOWER(B.OFFERING_COMPNT_CD) = LOWER(B.existing_OFFERING_COMPNT_CD) \n",
					"and LOWER(B.column_hash) <> LOWER(B.existing_rec_checksum)\n",
					"AND A.CURRENT_IND='Y' AND A.REC_START_DT=b.existing_REC_START_DT\n",
					";"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Insert for changed rows which are missing in target and present in source based on Natural Key.\n",
					"\n",
					"qry_ins_changed_rows=\"\"\"\n",
					"INSERT INTO {}\n",
					"\tselect \n",
					"    existing_SERVICE_COMPONENT_KEY\n",
					"    ,1 + existing_SERVICE_COMPONENT_VERSION as SERVICE_COMPONENT_VERSION\n",
					"    ,OFFERING_COMPNT_CD\n",
					"\t,OFFERING_COMPNT_DESC\n",
					"\t,-1\n",
					"\t,OFFERING_CD\n",
					"\t,OFFERING_DESC\n",
					"\t,-1\n",
					"\t,SERVICE_CD\n",
					"\t,SERVICE_DESC\n",
					"\t,-1\n",
					"\t,OFFERING_CAT_CD\n",
					"\t,OFFERING_CAT_DESC\n",
					"\t,OFFERING_GROUP\n",
					"\t,-1\n",
					"\t,BUS_MEASMNT_DIV_CD\n",
					"\t,''\n",
					"\t,-1\n",
					"\t,''\n",
					"\t,''\n",
					"\t,-1\n",
					"\t,''\n",
					"\t,''\n",
					"\t,'Y' AS CURRENT_IND\n",
					"\t,CURRENT_TIMESTAMP AS EXTRACT_DT\n",
					"\t,CURRENT_TIMESTAMP AS REC_START_DT\n",
					"\t,'9999-12-31 00:00:00.000' as REC_END_DT\n",
					"\t,'ESA' AS SOURCE_SYSTEM\t\n",
					"\t,column_hash as REC_CHECKSUM\n",
					"\t,'U' as REC_STATUS\n",
					"\t,current_timestamp as IMG_LST_UPD_DT\n",
					"\t,existing_IMG_CREATED_DT AS IMG_CREATED_DT\n",
					"\t,OFFERING_COMPNT_STATUS_CD\n",
					"\t,OFFERING_COMPNT_STATUS_DESC\n",
					"\t,OFFERING_AREA_CODE\n",
					"\t,OFFERING_AREA_DESC\n",
					"\t,SERVICE_GROUP_CODE\n",
					"\t,SERVICE_GROUP_DESC\n",
					"\t,BRAND_CODE\n",
					"\t,BRAND_DESC\n",
					"\t,'ED' AS DATA_IND\n",
					"\t,'Y' AS ACTIVE_IN_SOURCE_IND \n",
					"from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"e=spark.sql(qry_ins_changed_rows.format(tablename,stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Soft Deletes - Update Active_Ind for the rows no longer active in source:\n",
					"\n",
					"qry_4_upd_deleted_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET ACTIVE_IN_SOURCE_IND='N'\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					"\n",
					";\n",
					"\"\"\"\n",
					"g=spark.sql(qry_4_upd_deleted_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key))"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select 'Number of Active Rows' as Title,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					";\n",
					"\n",
					"\n",
					"select 'Duplicate Rows based on surrogate key' as Title,SERVICE_COMPONENT_KEY,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"    group by SERVICE_COMPONENT_KEY\n",
					"    having count(*)>1\n",
					";\n",
					"\n",
					"select 'Duplicate Rows based on natural key' as Title,OFFERING_COMPNT_CD,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"    group by OFFERING_COMPNT_CD\n",
					"    having count(*)>1\n",
					";\n",
					"\n",
					"select 'New rows inserted in this run' as Title,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"    and date(extract_dt)=current_date and rec_status='I'\n",
					";\n",
					"\n",
					"select 'Changed rows inserted in this run' as Title,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"    and date(extract_dt)=current_date and rec_status='U'\n",
					";\n",
					"\n",
					"select 'Changed rows updated in this run' as Title,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='N'\n",
					"    and date(REC_END_DT)=current_date --and rec_status='I'\n",
					";\n",
					"\n",
					"select 'Rows no longer active in source' as Title,count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"    AND \n",
					"     date(REC_END_DT)=current_date --and rec_status='I'\n",
					";\n",
					""
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT COUNT(*) FROM etlhubconfirmed.dht_service\n",
					"WHERE CURRENT_IND='N' and DATE(REC_END_DT)<>'9999-12-31'\n",
					"    and date(img_lst_upd_dt)=current_date\n",
					"        limit 1\n",
					";\n",
					"\n",
					"\n",
					"select count(*) from etlhubconfirmed.dht_service where CURRENT_IND='Y'\n",
					"   and date(extract_dt)=current_date --and rec_status='I'\n",
					";\n",
					"\n",
					"select count(*) from etlhubconfirmed.dht_service\n",
					"WHERE ACTIVE_IN_SOURCE_IND='N'\n",
					"    and date(IMG_LST_UPD_DT)=current_date\n",
					"    ;\n",
					"UPDATE etlhubconfirmed.dht_service\n",
					"set CURRENT_IND='Y', \n",
					"REC_END_DT='9999-12-31'\n",
					"  WHERE CURRENT_IND='N' and DATE(REC_END_DT)<>'9999-12-31'\n",
					"    and date(img_lst_upd_dt)=current_date\n",
					"        ;  "
				],
				"execution_count": 50
			}
		]
	}
}