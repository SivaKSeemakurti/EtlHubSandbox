{
	"name": "nb_dht_market_load",
	"properties": {
		"folder": {
			"name": "ETLHub/Dimensions&Facts"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sPoolKyn001494",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d4480520-059e-425c-b91c-51c1ab25b333"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/eb01b8c2-e8d1-4c19-9788-5469f1f3fd10/resourceGroups/rg-kyn-001494-dev-eus-001/providers/Microsoft.Synapse/workspaces/asa-kyn-001494-dev-eus-001/bigDataPools/sPoolKyn001494",
				"name": "sPoolKyn001494",
				"type": "Spark",
				"endpoint": "https://asa-kyn-001494-dev-eus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sPoolKyn001494",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Market/Customer Dimension load**\n",
					"\n",
					"This notebook loads data to deltalake table etlhubconfirmed.dht_market by sourceing data from ESA Kyndryl.\n",
					"Since ESA is not accessible from Azure, a datastage job src_ESA_Market_Azure is executed on datastage to push the ESA extract to adls.\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Import all the necessary libraries"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from azure.storage.blob import BlobClient\n",
					"import pandas as pd\n",
					"from io import StringIO\n",
					"from pyspark.sql.functions import md5, concat_ws\n",
					"from sqlite3 import connect\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import SparkSession \n",
					"from pyspark.sql.types import * \n",
					"from delta.tables import *\n",
					"import os\n",
					"import sys\n",
					"from datetime import datetime"
				],
				"execution_count": 133
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Define Parameters"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": []
				},
				"source": [
					"account_name = 'adls4fsoetlhubdevuseast' # fill in your primary account name \n",
					"container_name = 'etlhubfilestorage' # fill in your container name \n",
					"relative_path = 'extract/ESA/' # fill in your relative folder path \n",
					"relative_archive_path='archive/'\n",
					"file_name='DS_MARKET_DATA.csv' \n",
					"#file_name='DS_MARKET_DATA_2022-07-25-08:05:43_AM.csv' \n",
					"natural_key=\"MARKET_BUSINESS_CD\"\n",
					"tablename=\"etlhubConfirmed.dht_market\"\n",
					"stagingtable=\"DHTS_MARKET\"\n",
					"keycolumn=\"MARKET_KEY\"\n",
					"date = datetime.now().strftime(\"%Y-%m-%d-%I:%M:%S_%p\")\n",
					"print(date)"
				],
				"execution_count": 134
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Copy source CSV file to archive folder including timestamp in file name"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#Read data from adls csv file extracted from source at \n",
					"https://adls4fsoetlhubdevuseast.dfs.core.windows.net/etlhubfilestorage/extract/ESA/DS_MARKET_DATA.csv"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path) \n",
					"print('Primary storage account path: ' + adls_path) \n",
					"\n",
					"adls_arch_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_archive_path) \n",
					"print('Primary storage account path: ' + adls_path) \n",
					"\n",
					"relative_archive_path\n",
					"# Read a csv file \n",
					"csv_path = adls_path + file_name\n",
					"arch_fil_name=file_name.rsplit(\".\")\n",
					"csv_archive_path = adls_arch_path + arch_fil_name[0] + '_' + date + '.' + arch_fil_name[1]\n",
					"print (csv_archive_path)\n",
					"\n",
					"incrementalData_DF = spark.read.csv(csv_path, header = 'true')\n",
					"\n",
					"incrementalData_DF.write.csv(csv_archive_path, header = 'true')\n",
					"\n",
					"# Get column list for creating Rec_Checksum\n",
					"\n",
					"#Add checks for duplicate data, Check for 1. dups in source data based on natural Key and\n",
					"# 2. Dups in target already\n",
					"\n",
					"col_list=[]\n",
					"for i in incrementalData_DF.columns:\n",
					"    col_list.append(i)\n",
					"\n",
					"# Add a checsum column to help identify the changed rows\n",
					"\n",
					"incrementalData_DF1 = incrementalData_DF.withColumn(\"nk_hash\",md5(natural_key))\n",
					"incrementalData_DF2 = incrementalData_DF1.withColumn(\"column_hash\", md5(concat_ws(\"\", *col_list)))\n",
					"\n",
					"#sell_cyclecolhashDF.show()\n",
					"incrementalData_DF2.createOrReplaceTempView(\"incrementalData_DF2\")"
				],
				"execution_count": 135
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"#Create a dataframe with target deltalake table data with necessary columns\n",
					"\n",
					"existingDataDF=spark.sql(\"SELECT * FROM {}  WHERE CURRENT_IND='Y'\".format(tablename))\n",
					"#existingDataDF=spark.sql(\"SELECT tgt.* from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\n",
					"\n",
					"existingMaxKeyDF=spark.sql(\"SELECT MAX({}) existing_MAX_KEY from {} WHERE CURRENT_IND='Y'\".format(keycolumn,tablename))\n",
					"\n",
					"#existingMaxKeyDF=spark.sql(\"SELECT MAX(EMPLOYEE_KEY) existing_MAX_KEY from etlhubConfirmed.DHT_EMPLOYEE tgt WHERE CURRENT_IND='Y'\")\n",
					"\n",
					"# prefix all columns from target table with 'existing_'. This will help to differentiate columns when incremental and existing DF's are joined\n",
					"\n",
					"existingDataDF1 = existingDataDF.select([F.col(c).alias('existing_'+c) for c in existingDataDF.columns])\n",
					"\n",
					"existingDataDF1.createOrReplaceTempView('existingDataDF1')\n",
					"\n",
					"fullJoin1=incrementalData_DF2.join(existingDataDF1, col(natural_key) == col(\"existing_\" + natural_key), \"fullouter\")\n",
					"\n",
					"fullJoin2=fullJoin1.join(existingMaxKeyDF,None,\"CROSS\")\n",
					"\n",
					"fullJoin2.createOrReplaceTempView('fullJoin')\n",
					"\n",
					"fullJoin2.write \\\n",
					"  .format(\"delta\") \\\n",
					"  .mode(\"overwrite\") \\\n",
					"  .option(\"overwriteSchema\", \"true\") \\\n",
					"  .option(\"path\", \"abfss://etlhubfilestorage@adls4fsoetlhubdevuseast.dfs.core.windows.net/deltalake/staging/{}\".format(stagingtable)) \\\n",
					"  .saveAsTable(stagingtable)\n",
					"   #.option(\"overwriteSchema\", \"true\") \\  .save(\"\") \\"
				],
				"execution_count": 136
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Data Validation Checks :\n",
					"\n",
					"- Check for duplicates in Source data based on natural key\n",
					"- Check for duplicates in target delta lake table based on natural key\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry3=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM incrementalData_DF2 GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry4=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM {} WHERE CURRENT_IND='Y' GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"df3=spark.sql(qry3.format(natural_key,natural_key))\n",
					"cnt1=df3.count()\n",
					"\n",
					"print (cnt1)\n",
					"if cnt1 == 0:\n",
					"    print(\"No Duplicates in source data\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in source:\")\n",
					"    df3.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(1)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"df4=spark.sql(qry4.format(natural_key,tablename,natural_key))\n",
					"cnt2=df4.count()\n",
					"\n",
					"print (cnt2)\n",
					"if cnt2 == 0:\n",
					"    print(\"no duplicates in target delta lake table\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in target delta lake table:\")\n",
					"    df4.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\n",
					""
				],
				"execution_count": 137
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry_4_recon1=\"\"\"\n",
					"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable,tablename,natural_key,natural_key))\n",
					"print('New records or Inserts are:') \n",
					"df_4_recon1.show()\n",
					"\n",
					"qry_4_recon2=\"\"\"\n",
					"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon2=spark.sql(qry_4_recon2.format(stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))\n",
					"print('Changed records or Updates are:') \n",
					"df_4_recon2.show()\n",
					"\n",
					"qry_4_recon3=\"\"\"\n",
					"SELECT COUNT(*) from \n",
					"{} A\n",
					"join fullJoin B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"\n",
					"\"\"\"\n",
					"\n",
					"df_4_recon3=spark.sql(qry_4_recon3.format(tablename,natural_key,natural_key,natural_key))\n",
					"print('Soft Deletes are:') \n",
					"df_4_recon3.show()"
				],
				"execution_count": 138
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT count(*) FROM etlhubconfirmed.dht_market where current_ind='Y'\n",
					";\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 139
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\n",
					"#Insert for New rows which are missing in target and present in source based on Natural Key.\n",
					"#delete FROM etlhubconfirmed.dht_employee;\n",
					"\n",
					"qry_4_recon1=\"\"\"\n",
					"SELECT COUNT(*) from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					"\n",
					"\"\"\"\n",
					"df_4_recon1=spark.sql(qry_4_recon1.format(stagingtable, tablename, natural_key, natural_key))\n",
					"\n",
					"qry_ins_new_rows=\"\"\"\n",
					"\n",
					"INSERT INTO {}\n",
					"\tselect \n",
					"\tCOALESCE(A.existing_MAX_KEY,0) + ROW_NUMBER () OVER (ORDER BY 1) AS {},1 as VERSION \n",
					",\tCUSTOMER_NO\n",
					",\tCUSTOMER_NM\n",
					",\tINAC_CD\n",
					",\tINAC_DESC\n",
					",\tCOUNTRY_CD\n",
					",\tMARKET_BUSINESS_CD\n",
					",\tSMB_IND\n",
					",\tCOMPANY_NO\n",
					",\tENTERPRISE_NM\n",
					",\tENTERPRISE_NO\n",
					",\tCUST_CITY_NM\n",
					",\tCUST_STATE_PROV_CD\n",
					",\tCUST_POSTL_CD\n",
					",\tISO_COUNTRY_CD\n",
					",\tISO_COUNTRY_DESC\n",
					",\tCMR_ISU_CD\n",
					",\tSUB_INDUSTRY_CD\n",
					",\tCURR_CVRG_TYP_CD\n",
					",\tCURR_CVRG_TYP_DESC\n",
					",\tCURR_CVRG_ID\n",
					",\tCURR_CVRG_NM\n",
					",\tDLGTD_CVRG_IND\n",
					",\tBASE_CVRG_TYP_CD\n",
					",\tBASE_CVRG_TYP_DESC\n",
					",\tBASE_CVRG_ID\n",
					",\tBASE_CVRG_NM\n",
					",\tTERR_ID\n",
					",\tTERR_NM\n",
					",\tDBCS_CUSTOMER_NM\n",
					",\tCLIENT_ID\n",
					",\tCLIENT_NM\n",
					",\tCVI_BRNCH_ID\n",
					",\tCVI_BRNCH_DESC\n",
					",\tCVI_BRNCH_GRP_CD\n",
					",\tCVI_BRNCH_GRP_DESC\n",
					",\tCVI_BRNCH_UNT_ID\n",
					",\tCVI_BRNCH_UNT_NM\n",
					",\tSMB_QUADTIER_CD\n",
					",\tCUST_ACCT_ID\n",
					",\tRPTS_TO_IMT_ID\n",
					",\tRPTS_TO_SCTR_CD\n",
					",\tRPTS_TO_SCTR_DESC\n",
					"\t,'Y' AS CURRENT_IND\n",
					"\t,CURRENT_TIMESTAMP AS EXTRACT_DT\n",
					"\t,CURRENT_TIMESTAMP AS REC_START_DT\n",
					"\t,'9999-12-31 00:00:00.000' as REC_END_DT\n",
					"\t\n",
					"\t,column_hash as REC_CHECKSUM\n",
					"\t,'I' as REC_STATUS\n",
					"\t,'ESA' AS SOURCE_SYSTEM\n",
					",\tCUST_INDUSTRY_SECTOR_KEY\n",
					",\tCUST_INDUSTRY_SECTOR_VERSION\n",
					",\tTERRITORY_RGN_KEY\n",
					",\tREPORTS_TO_IMT_GEO_KEY\n",
					",\tFIN_COUNTRY_KEY\n",
					"\t,current_timestamp as IMG_LST_UPD_DT\n",
					"\t,CURRENT_TIMESTAMP AS IMG_CREATED_DT\n",
					",\tBOID\n",
					",\tDOMESTIC_CLIENT_ID\n",
					",\tDOMESTIC_CLIENT_NM\n",
					",\tGLOBAL_CLIENT_ID\n",
					",\tGLOBAL_CLIENT_NM\n",
					",\tGLOBAL_ULTIMATE_CLIENT_ID\n",
					",\tGLOBAL_ULTIMATE_CLIENT_NM\n",
					",\tDOMESTIC_BUYING_GROUP_ID\n",
					",\tDOMESTIC_BUYING_GROUP_NM\n",
					",\tGLOBAL_BUYING_GROUP_ID\n",
					",\tGLOBAL_BUYING_GROUP_NM\n",
					",\tTOP_TREE_ACCT_ID\n",
					",\tTOP_TREE_ID\n",
					",\tTOP_TREE_NM\n",
					",\t'' AS STANDARD_INDUSTRIAL_CLASSIFICATION_CD\n",
					",\tCOV_CLIENT_TYPE\n",
					",\tCOV_CLIENT_TYPE_DESC\n",
					",\tCOV_CLIENT_SUBTYPE\n",
					",\tCOV_CLIENT_SUBTYPE_DESC\n",
					"\t,'Y' AS ACTIVE_IN_SOURCE_IND \n",
					"    from {} A \n",
					"WHERE existing_REC_CHECKSUM is null\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE A.{}=B.{}\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM)\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"d=spark.sql(qry_ins_new_rows.format(tablename,keycolumn,stagingtable,tablename,natural_key, natural_key ))\n",
					""
				],
				"execution_count": 140
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 141
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT extract_dt,count(*) FROM etlhubconfirmed.dht_market where current_ind='Y' group by extract_dt  \n",
					"--and extract_dt like '2022-07-29-02:16%'\n",
					"    --2022-07-29T14:17:38Z"
				],
				"execution_count": 142
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT count(*) FROM etlhubconfirmed.dht_market where current_ind='Y'"
				],
				"execution_count": 143
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Update or expire the rows with existing instance of the changed rows:\n",
					"qry_4_upd_changes_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.{}\n",
					"AND LOWER(B.{}) = LOWER(B.existing_{}) \n",
					"and LOWER(B.column_hash) <> LOWER(B.existing_rec_checksum)\n",
					"AND A.CURRENT_IND='Y' AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET CURRENT_IND='N'\n",
					"    ,REC_END_DT= REC_START_DT -  INTERVAL 1 seconds --current_timestamp --existing_REC_START_DT-1\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					";\n",
					"\"\"\"\n",
					"f=spark.sql(qry_4_upd_changes_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key,natural_key))\n",
					""
				],
				"execution_count": 144
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 145
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select * from  etlhubconfirmed.dht_market where rec_end_dt= rec_start_dt - INTERVAL 1 seconds\n",
					"--and extract_dt like '2022-07-29-02:16%'\n",
					"    --2022-07-29T14:17:38Z"
				],
				"execution_count": 146
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"--existing data\n",
					"select 'existing data',count(*) from DHTS_MARKET where existing_CURRENT_IND='Y';\n",
					"  \n",
					"select 'rows for Update', count(*)\n",
					"from etlhubConfirmed.DHT_MARKET B\n",
					"join\n",
					"DHTS_MARKET A \n",
					"WHERE A.MARKET_BUSINESS_CD = B.MARKET_BUSINESS_CD\n",
					"and LOWER(A.MARKET_BUSINESS_CD) = LOWER(A.existing_MARKET_BUSINESS_CD) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND B.REC_START_DT=A.existing_REC_START_DT\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM etlhubConfirmed.DHT_MARKET B\n",
					"WHERE LOWER(A.MARKET_BUSINESS_CD)=LOWER(B.MARKET_BUSINESS_CD)\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\n",
					"SELECT COUNT(*) FROM etlhubConfirmed.DHT_MARKET A\n",
					"JOIN DHTS_MARKET B\n",
					"ON A.MARKET_BUSINESS_CD = B.MARKET_BUSINESS_CD\n",
					"AND LOWER(B.MARKET_BUSINESS_CD) = LOWER(B.existing_MARKET_BUSINESS_CD) \n",
					"and LOWER(B.column_hash) <> LOWER(B.existing_rec_checksum)\n",
					"AND A.CURRENT_IND='Y' AND A.REC_START_DT=b.existing_REC_START_DT\n",
					";"
				],
				"execution_count": 147
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Insert for changed rows which are missing in target and present in source based on Natural Key.\n",
					"\n",
					"qry_ins_changed_rows=\"\"\"\n",
					"INSERT INTO {}\n",
					"\tselect \n",
					"    existing_MARKET_KEY\n",
					"    ,1 + existing_MARKET_VERSION as VERSION\n",
					",\tCUSTOMER_NO\n",
					",\tCUSTOMER_NM\n",
					",\tINAC_CD\n",
					",\tINAC_DESC\n",
					",\tCOUNTRY_CD\n",
					",\tMARKET_BUSINESS_CD\n",
					",\tSMB_IND\n",
					",\tCOMPANY_NO\n",
					",\tENTERPRISE_NM\n",
					",\tENTERPRISE_NO\n",
					",\tCUST_CITY_NM\n",
					",\tCUST_STATE_PROV_CD\n",
					",\tCUST_POSTL_CD\n",
					",\tISO_COUNTRY_CD\n",
					",\tISO_COUNTRY_DESC\n",
					",\tCMR_ISU_CD\n",
					",\tSUB_INDUSTRY_CD\n",
					",\tCURR_CVRG_TYP_CD\n",
					",\tCURR_CVRG_TYP_DESC\n",
					",\tCURR_CVRG_ID\n",
					",\tCURR_CVRG_NM\n",
					",\tDLGTD_CVRG_IND\n",
					",\tBASE_CVRG_TYP_CD\n",
					",\tBASE_CVRG_TYP_DESC\n",
					",\tBASE_CVRG_ID\n",
					",\tBASE_CVRG_NM\n",
					",\tTERR_ID\n",
					",\tTERR_NM\n",
					",\tDBCS_CUSTOMER_NM\n",
					",\tCLIENT_ID\n",
					",\tCLIENT_NM\n",
					",\tCVI_BRNCH_ID\n",
					",\tCVI_BRNCH_DESC\n",
					",\tCVI_BRNCH_GRP_CD\n",
					",\tCVI_BRNCH_GRP_DESC\n",
					",\tCVI_BRNCH_UNT_ID\n",
					",\tCVI_BRNCH_UNT_NM\n",
					",\tSMB_QUADTIER_CD\n",
					",\tCUST_ACCT_ID\n",
					",\tRPTS_TO_IMT_ID\n",
					",\tRPTS_TO_SCTR_CD\n",
					",\tRPTS_TO_SCTR_DESC\n",
					",'Y' AS CURRENT_IND\n",
					"\t,CURRENT_TIMESTAMP AS EXTRACT_DT\n",
					"\t,existing_REC_START_DT AS REC_START_DT\n",
					"\t,'9999-12-31 00:00:00.000' as REC_END_DT\t\n",
					"\t,column_hash as REC_CHECKSUM\n",
					"\t,'U' as REC_STATUS\n",
					"\t,'ESA' AS SOURCE_SYSTEM\n",
					",\tCUST_INDUSTRY_SECTOR_KEY\n",
					",\tCUST_INDUSTRY_SECTOR_VERSION\n",
					",\tTERRITORY_RGN_KEY\n",
					",\tREPORTS_TO_IMT_GEO_KEY\n",
					",\tFIN_COUNTRY_KEY\n",
					"\t,current_timestamp as IMG_LST_UPD_DT\n",
					"\t,CURRENT_TIMESTAMP AS IMG_CREATED_DT\n",
					",\tBOID\n",
					",\tDOMESTIC_CLIENT_ID\n",
					",\tDOMESTIC_CLIENT_NM\n",
					",\tGLOBAL_CLIENT_ID\n",
					",\tGLOBAL_CLIENT_NM\n",
					",\tGLOBAL_ULTIMATE_CLIENT_ID\n",
					",\tGLOBAL_ULTIMATE_CLIENT_NM\n",
					",\tDOMESTIC_BUYING_GROUP_ID\n",
					",\tDOMESTIC_BUYING_GROUP_NM\n",
					",\tGLOBAL_BUYING_GROUP_ID\n",
					",\tGLOBAL_BUYING_GROUP_NM\n",
					",\tTOP_TREE_ACCT_ID\n",
					",\tTOP_TREE_ID\n",
					",\tTOP_TREE_NM\n",
					",\t'' AS STANDARD_INDUSTRIAL_CLASSIFICATION_CD\n",
					",\tCOV_CLIENT_TYPE\n",
					",\tCOV_CLIENT_TYPE_DESC\n",
					",\tCOV_CLIENT_SUBTYPE\n",
					",\tCOV_CLIENT_SUBTYPE_DESC\n",
					"\t,'Y' AS ACTIVE_IN_SOURCE_IND \n",
					"from {} A \n",
					"WHERE LOWER({}) = LOWER(existing_{}) \n",
					"and LOWER(column_hash) <> LOWER(existing_rec_checksum)\n",
					"AND NOT EXISTS\n",
					"(SELECT 1 FROM {} B\n",
					"WHERE LOWER(A.{})=LOWER(B.{})\n",
					"and b.CURRENT_IND='Y'\n",
					"AND A.column_hash=B.REC_CHECKSUM\n",
					")\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"e=spark.sql(qry_ins_changed_rows.format(tablename,stagingtable,natural_key,natural_key,tablename,natural_key,natural_key))"
				],
				"execution_count": 148
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 149
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT extract_dt,count(*) FROM etlhubconfirmed.dht_market where current_ind='Y' group by extract_dt  \n",
					"--and extract_dt like '2022-07-29-02:16%'\n",
					"    --2022-07-29T14:17:38Z"
				],
				"execution_count": 150
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Soft Deletes - Update Active_Ind for the rows no longer active in source:\n",
					"\n",
					"qry_4_upd_deleted_rows=\"\"\"\n",
					"\n",
					"MERGE INTO {} A\n",
					"USING {} B\n",
					"ON A.{} = B.existing_{}\n",
					"AND B.{} is NULL\n",
					"AND A.CURRENT_IND='Y' AND A.ACTIVE_IN_SOURCE_IND='Y' \n",
					"AND A.REC_START_DT=b.existing_REC_START_DT\n",
					"WHEN MATCHED THEN UPDATE SET ACTIVE_IN_SOURCE_IND='N'\n",
					"    ,IMG_LST_UPD_DT=current_timestamp\n",
					"\n",
					";\n",
					"\"\"\"\n",
					"g=spark.sql(qry_4_upd_deleted_rows.format(tablename,stagingtable,natural_key,natural_key,natural_key))"
				],
				"execution_count": 151
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT extract_dt,REC_START_DT,REC_END_DT,CURRENT_IND,ACTIVE_IN_SOURCE_IND,count(*) \n",
					"FROM etlhubconfirmed.dht_market group by extract_dt,REC_START_DT,REC_END_DT,CURRENT_IND,ACTIVE_IN_SOURCE_IND\n",
					"--and extract_dt like '2022-07-29-02:16%'\n",
					"    --2022-07-29T14:17:38Z"
				],
				"execution_count": 153
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"select 'Number of Active Rows' as Title,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					";\n",
					"\n",
					"\n",
					"select 'Duplicate Rows based on surrogate key' as Title,market_KEY,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"    group by market_KEY\n",
					"    having count(*)>1\n",
					";\n",
					"\n",
					"select 'Duplicate Rows based on natural key' as Title,market_BUSINESS_CD,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"    group by market_BUSINESS_CD\n",
					"    having count(*)>1\n",
					";\n",
					"\n",
					"select 'New rows inserted in this run' as Title,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"    and date(extract_dt)=current_date and rec_status='I'\n",
					";\n",
					"\n",
					"select 'Changed rows inserted in this run' as Title,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"    and date(extract_dt)=current_date and rec_status='U'\n",
					";\n",
					"\n",
					"select 'Changed rows updated in this run' as Title,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='N'\n",
					"    and date(REC_END_DT)=current_date --and rec_status='I'\n",
					";\n",
					"\n",
					"select 'Rows no longer active in source' as Title,count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"    AND \n",
					"     date(REC_END_DT)=current_date --and rec_status='I'\n",
					";\n",
					""
				],
				"execution_count": 154
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT COUNT(*) FROM etlhubconfirmed.dht_market\n",
					"WHERE CURRENT_IND='N' and DATE(REC_END_DT)<>'9999-12-31'\n",
					"    and date(img_lst_upd_dt)=current_date\n",
					"        limit 1\n",
					";\n",
					"\n",
					"\n",
					"select count(*) from etlhubconfirmed.dht_market where CURRENT_IND='Y'\n",
					"   and date(extract_dt)=current_date --and rec_status='I'\n",
					";\n",
					"\n",
					"select count(*) from etlhubconfirmed.dht_market\n",
					"WHERE ACTIVE_IN_SOURCE_IND='N'\n",
					"    and date(IMG_LST_UPD_DT)=current_date\n",
					"    ;"
				],
				"execution_count": 155
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT MARKET_BUSINESS_CD,MARKET_VERSION,CURRENT_IND,REC_START_DT,REC_END_DT,EXTRACT_DT,IMG_LST_UPD_DT,IMG_CREATED_DT,ACTIVE_IN_SOURCE_IND\n",
					" FROM etlhubconfirmed.dht_market A WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD  IN ('008887~613','008915~613')"
				],
				"execution_count": 156
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qry3=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM incrementalData_DF2 GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"qry4=\"\"\"\n",
					"SELECT COUNT(*) as CNT, {} FROM {} WHERE CURRENT_IND='Y' GROUP BY {} HAVING COUNT(*)>1\n",
					";\n",
					"\"\"\"\n",
					"\n",
					"\n",
					"df4=spark.sql(qry4.format(natural_key,tablename,natural_key))\n",
					"cnt2=df4.count()\n",
					"\n",
					"print (cnt2)\n",
					"if cnt2 == 0:\n",
					"    print(\"no duplicates in target delta lake table\")\n",
					"    status = 'success'\n",
					"else:\n",
					"    print(\"Below are the duplicates in target delta lake table:\")\n",
					"    df4.show()\n",
					"    status = 'fail'\n",
					"    #os.abort() this will take the spark cluster also down\n",
					"    sys.exit(2)\n",
					"    print(\"This will not be printed\")\n",
					"\n",
					"#Below code can be used to evaluate if the DMLs are successful or not Exception handling purpose\n",
					""
				],
				"execution_count": 157
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\n",
					"SELECT * FROM etlhubconfirmed.dht_market WHERE --CURRENT_IND='N' \n",
					"MARKET_BUSINESS_CD ='008887~613'\n",
					"    --'008915~613'\n",
					"        --71588\n",
					"        --71590\n",
					""
				],
				"execution_count": 158
			}
		]
	}
}